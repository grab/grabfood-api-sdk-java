// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.api;

import com.grab.grabfood.client.ApiCallback;
import com.grab.grabfood.client.ApiClient;
import com.grab.grabfood.client.ApiException;
import com.grab.grabfood.client.ApiResponse;
import com.grab.grabfood.client.Configuration;
import com.grab.grabfood.client.Pair;
import com.grab.grabfood.client.ProgressRequestBody;
import com.grab.grabfood.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.grab.grabfood.client.model.ListOrdersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ListOrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ListOrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ListOrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listOrders
     * @param authorization Specify the generated authorization token of the bearer type. (required)
     * @param merchantID The merchant&#39;s ID that is in GrabFood&#39;s database. (required)
     * @param date  (required)
     * @param page Specify the page number for the report. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2xx </td><td> Sync success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrdersCall(String authorization, String merchantID, String date, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/partner/v1/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (merchantID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantID", merchantID));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrdersValidateBeforeCall(String authorization, String merchantID, String date, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listOrders(Async)");
        }

        // verify the required parameter 'merchantID' is set
        if (merchantID == null) {
            throw new ApiException("Missing the required parameter 'merchantID' when calling listOrders(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling listOrders(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling listOrders(Async)");
        }

        return listOrdersCall(authorization, merchantID, date, page, _callback);

    }

    /**
     * List orders
     * 
     * @param authorization Specify the generated authorization token of the bearer type. (required)
     * @param merchantID The merchant&#39;s ID that is in GrabFood&#39;s database. (required)
     * @param date  (required)
     * @param page Specify the page number for the report. (required)
     * @return ListOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2xx </td><td> Sync success </td><td>  -  </td></tr>
     </table>
     */
    public ListOrdersResponse listOrders(String authorization, String merchantID, String date, Integer page) throws ApiException {
        ApiResponse<ListOrdersResponse> localVarResp = listOrdersWithHttpInfo(authorization, merchantID, date, page);
        return localVarResp.getData();
    }

    /**
     * List orders
     * 
     * @param authorization Specify the generated authorization token of the bearer type. (required)
     * @param merchantID The merchant&#39;s ID that is in GrabFood&#39;s database. (required)
     * @param date  (required)
     * @param page Specify the page number for the report. (required)
     * @return ApiResponse&lt;ListOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2xx </td><td> Sync success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListOrdersResponse> listOrdersWithHttpInfo(String authorization, String merchantID, String date, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listOrdersValidateBeforeCall(authorization, merchantID, date, page, null);
        Type localVarReturnType = new TypeToken<ListOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List orders (asynchronously)
     * 
     * @param authorization Specify the generated authorization token of the bearer type. (required)
     * @param merchantID The merchant&#39;s ID that is in GrabFood&#39;s database. (required)
     * @param date  (required)
     * @param page Specify the page number for the report. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2xx </td><td> Sync success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrdersAsync(String authorization, String merchantID, String date, Integer page, final ApiCallback<ListOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrdersValidateBeforeCall(authorization, merchantID, date, page, _callback);
        Type localVarReturnType = new TypeToken<ListOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
