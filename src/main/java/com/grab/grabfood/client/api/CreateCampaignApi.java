// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.api;

import com.grab.grabfood.client.ApiCallback;
import com.grab.grabfood.client.ApiClient;
import com.grab.grabfood.client.ApiException;
import com.grab.grabfood.client.ApiResponse;
import com.grab.grabfood.client.Configuration;
import com.grab.grabfood.client.Pair;
import com.grab.grabfood.client.ProgressRequestBody;
import com.grab.grabfood.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.grab.grabfood.client.model.CreateCampaignRequest;
import com.grab.grabfood.client.model.CreateCampaignResponse;
import com.grab.grabfood.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreateCampaignApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CreateCampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CreateCampaignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCampaign
     * @param contentType The content type of the request body. You must use &#x60;application/json&#x60; for this header as GrabFood API currently does not support other formats. (required)
     * @param authorization Specify the generated authorization token of the bearer type. (required)
     * @param createCampaignRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid_argument | Code | Reason           | Message                            | | ---- | ---------------- | ----------------------------------- | | 400  | invalid_argument | items not found                  | | 400  | invalid_argument | startTime has to be after now    | | 400  | invalid_argument | CAMPAIGN_START_TIME_TOO_CLOSE_TO_NOW:failed to create MFC:    | | 400  | invalid_argument | CAMPAIGN_DURATION_TOO_LONG:failed to create MFC:    | | 400  | invalid_argument | EFFECTIVE_DATE_OVERLAP:failed to create MFC: Item(s) are on multiple promotions in the same promotion period: SGITE2021052909250501859400 (4-CY4VMFMANYBYJ6-CZNZFFL1G8KKLX-94794295)\&quot;    | | 400  | invalid_argument | EATER_TYPE_CONDITION_IS_NOT_SUPPORTED:failed to create MFC: This level campaign can&#39;t be applied for such eater type    | | 400  | invalid_argument | INVALID_QUOTAS:failed to create MFC:    | | 400  | invalid_argument | INVALID_DISCOUNT_VALUE:failed to create MFC:     | | 400  | invalid_argument | INVALID_PARAMS:failed to create MFC: Order level campaign should have min basket condition    | | 400  | invalid_argument | INVALID_BUNDLE_OFFER:failed to create MFC: bundle price invalid    | | 400  | invalid_argument | INVALID_BUNDLE_OFFER:failed to create MFC: itemIDs should be between 2 and 20    | | 400  | invalid_argument | NOT_SUPPORT_BUNDLE_SAME_MULTIPLE_ITEMS:failed to create MFC: bundle multiple items is not supported for same item bundle    | | 400  | invalid_argument | EXCEED_ACTIVE_CAMPAIGN_MAX_LIMIT:failed to create MFC: number of same campaign level&#39;s promotions exceeds maximum limit(100)    |  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCampaignCall(String contentType, String authorization, CreateCampaignRequest createCampaignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCampaignRequest;

        // create path and map variables
        String localVarPath = "/partner/v1/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCampaignValidateBeforeCall(String contentType, String authorization, CreateCampaignRequest createCampaignRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createCampaign(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createCampaign(Async)");
        }

        // verify the required parameter 'createCampaignRequest' is set
        if (createCampaignRequest == null) {
            throw new ApiException("Missing the required parameter 'createCampaignRequest' when calling createCampaign(Async)");
        }

        return createCampaignCall(contentType, authorization, createCampaignRequest, _callback);

    }

    /**
     * Create campaign
     * 
     * @param contentType The content type of the request body. You must use &#x60;application/json&#x60; for this header as GrabFood API currently does not support other formats. (required)
     * @param authorization Specify the generated authorization token of the bearer type. (required)
     * @param createCampaignRequest  (required)
     * @return CreateCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid_argument | Code | Reason           | Message                            | | ---- | ---------------- | ----------------------------------- | | 400  | invalid_argument | items not found                  | | 400  | invalid_argument | startTime has to be after now    | | 400  | invalid_argument | CAMPAIGN_START_TIME_TOO_CLOSE_TO_NOW:failed to create MFC:    | | 400  | invalid_argument | CAMPAIGN_DURATION_TOO_LONG:failed to create MFC:    | | 400  | invalid_argument | EFFECTIVE_DATE_OVERLAP:failed to create MFC: Item(s) are on multiple promotions in the same promotion period: SGITE2021052909250501859400 (4-CY4VMFMANYBYJ6-CZNZFFL1G8KKLX-94794295)\&quot;    | | 400  | invalid_argument | EATER_TYPE_CONDITION_IS_NOT_SUPPORTED:failed to create MFC: This level campaign can&#39;t be applied for such eater type    | | 400  | invalid_argument | INVALID_QUOTAS:failed to create MFC:    | | 400  | invalid_argument | INVALID_DISCOUNT_VALUE:failed to create MFC:     | | 400  | invalid_argument | INVALID_PARAMS:failed to create MFC: Order level campaign should have min basket condition    | | 400  | invalid_argument | INVALID_BUNDLE_OFFER:failed to create MFC: bundle price invalid    | | 400  | invalid_argument | INVALID_BUNDLE_OFFER:failed to create MFC: itemIDs should be between 2 and 20    | | 400  | invalid_argument | NOT_SUPPORT_BUNDLE_SAME_MULTIPLE_ITEMS:failed to create MFC: bundle multiple items is not supported for same item bundle    | | 400  | invalid_argument | EXCEED_ACTIVE_CAMPAIGN_MAX_LIMIT:failed to create MFC: number of same campaign level&#39;s promotions exceeds maximum limit(100)    |  </td><td>  -  </td></tr>
     </table>
     */
    public CreateCampaignResponse createCampaign(String contentType, String authorization, CreateCampaignRequest createCampaignRequest) throws ApiException {
        ApiResponse<CreateCampaignResponse> localVarResp = createCampaignWithHttpInfo(contentType, authorization, createCampaignRequest);
        return localVarResp.getData();
    }

    /**
     * Create campaign
     * 
     * @param contentType The content type of the request body. You must use &#x60;application/json&#x60; for this header as GrabFood API currently does not support other formats. (required)
     * @param authorization Specify the generated authorization token of the bearer type. (required)
     * @param createCampaignRequest  (required)
     * @return ApiResponse&lt;CreateCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid_argument | Code | Reason           | Message                            | | ---- | ---------------- | ----------------------------------- | | 400  | invalid_argument | items not found                  | | 400  | invalid_argument | startTime has to be after now    | | 400  | invalid_argument | CAMPAIGN_START_TIME_TOO_CLOSE_TO_NOW:failed to create MFC:    | | 400  | invalid_argument | CAMPAIGN_DURATION_TOO_LONG:failed to create MFC:    | | 400  | invalid_argument | EFFECTIVE_DATE_OVERLAP:failed to create MFC: Item(s) are on multiple promotions in the same promotion period: SGITE2021052909250501859400 (4-CY4VMFMANYBYJ6-CZNZFFL1G8KKLX-94794295)\&quot;    | | 400  | invalid_argument | EATER_TYPE_CONDITION_IS_NOT_SUPPORTED:failed to create MFC: This level campaign can&#39;t be applied for such eater type    | | 400  | invalid_argument | INVALID_QUOTAS:failed to create MFC:    | | 400  | invalid_argument | INVALID_DISCOUNT_VALUE:failed to create MFC:     | | 400  | invalid_argument | INVALID_PARAMS:failed to create MFC: Order level campaign should have min basket condition    | | 400  | invalid_argument | INVALID_BUNDLE_OFFER:failed to create MFC: bundle price invalid    | | 400  | invalid_argument | INVALID_BUNDLE_OFFER:failed to create MFC: itemIDs should be between 2 and 20    | | 400  | invalid_argument | NOT_SUPPORT_BUNDLE_SAME_MULTIPLE_ITEMS:failed to create MFC: bundle multiple items is not supported for same item bundle    | | 400  | invalid_argument | EXCEED_ACTIVE_CAMPAIGN_MAX_LIMIT:failed to create MFC: number of same campaign level&#39;s promotions exceeds maximum limit(100)    |  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCampaignResponse> createCampaignWithHttpInfo(String contentType, String authorization, CreateCampaignRequest createCampaignRequest) throws ApiException {
        okhttp3.Call localVarCall = createCampaignValidateBeforeCall(contentType, authorization, createCampaignRequest, null);
        Type localVarReturnType = new TypeToken<CreateCampaignResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create campaign (asynchronously)
     * 
     * @param contentType The content type of the request body. You must use &#x60;application/json&#x60; for this header as GrabFood API currently does not support other formats. (required)
     * @param authorization Specify the generated authorization token of the bearer type. (required)
     * @param createCampaignRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid_argument | Code | Reason           | Message                            | | ---- | ---------------- | ----------------------------------- | | 400  | invalid_argument | items not found                  | | 400  | invalid_argument | startTime has to be after now    | | 400  | invalid_argument | CAMPAIGN_START_TIME_TOO_CLOSE_TO_NOW:failed to create MFC:    | | 400  | invalid_argument | CAMPAIGN_DURATION_TOO_LONG:failed to create MFC:    | | 400  | invalid_argument | EFFECTIVE_DATE_OVERLAP:failed to create MFC: Item(s) are on multiple promotions in the same promotion period: SGITE2021052909250501859400 (4-CY4VMFMANYBYJ6-CZNZFFL1G8KKLX-94794295)\&quot;    | | 400  | invalid_argument | EATER_TYPE_CONDITION_IS_NOT_SUPPORTED:failed to create MFC: This level campaign can&#39;t be applied for such eater type    | | 400  | invalid_argument | INVALID_QUOTAS:failed to create MFC:    | | 400  | invalid_argument | INVALID_DISCOUNT_VALUE:failed to create MFC:     | | 400  | invalid_argument | INVALID_PARAMS:failed to create MFC: Order level campaign should have min basket condition    | | 400  | invalid_argument | INVALID_BUNDLE_OFFER:failed to create MFC: bundle price invalid    | | 400  | invalid_argument | INVALID_BUNDLE_OFFER:failed to create MFC: itemIDs should be between 2 and 20    | | 400  | invalid_argument | NOT_SUPPORT_BUNDLE_SAME_MULTIPLE_ITEMS:failed to create MFC: bundle multiple items is not supported for same item bundle    | | 400  | invalid_argument | EXCEED_ACTIVE_CAMPAIGN_MAX_LIMIT:failed to create MFC: number of same campaign level&#39;s promotions exceeds maximum limit(100)    |  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCampaignAsync(String contentType, String authorization, CreateCampaignRequest createCampaignRequest, final ApiCallback<CreateCampaignResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCampaignValidateBeforeCall(contentType, authorization, createCampaignRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateCampaignResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
