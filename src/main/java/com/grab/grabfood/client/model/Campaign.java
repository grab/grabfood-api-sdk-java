// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.grab.grabfood.client.model.CampaignConditions;
import com.grab.grabfood.client.model.CampaignDiscount;
import com.grab.grabfood.client.model.CampaignQuotas;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.grab.grabfood.client.JSON;

/**
 * A JSON object containing the campaign details for a merchant. Only campaigns that are funded by merchants will be sent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class Campaign {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The party who created the campaign. Can be created by partners via API, merchants via the merchant app or Grab.
   */
  @JsonAdapter(CreatedByEnum.Adapter.class)
  public enum CreatedByEnum {
    GRAB("Grab"),
    
    MERCHANT("Merchant"),
    
    PARTNER("Partner"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    CreatedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreatedByEnum fromValue(String value) {
      for (CreatedByEnum b : CreatedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<CreatedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreatedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreatedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreatedByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreatedByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private CreatedByEnum createdBy;

  public static final String SERIALIZED_NAME_MERCHANT_I_D = "merchantID";
  @SerializedName(SERIALIZED_NAME_MERCHANT_I_D)
  private String merchantID;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUOTAS = "quotas";
  @SerializedName(SERIALIZED_NAME_QUOTAS)
  private CampaignQuotas quotas;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private CampaignConditions conditions;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private CampaignDiscount discount;

  public static final String SERIALIZED_NAME_CUSTOM_TAG = "customTag";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TAG)
  private String customTag;

  public Campaign() {
  }

  public Campaign id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The campaign&#39;s ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Campaign createdBy(CreatedByEnum createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * The party who created the campaign. Can be created by partners via API, merchants via the merchant app or Grab.
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public CreatedByEnum getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(CreatedByEnum createdBy) {
    this.createdBy = createdBy;
  }


  public Campaign merchantID(String merchantID) {
    this.merchantID = merchantID;
    return this;
  }

  /**
   * The merchant&#39;s ID that is in GrabFood&#39;s database.
   * @return merchantID
   */
  @javax.annotation.Nonnull
  public String getMerchantID() {
    return merchantID;
  }

  public void setMerchantID(String merchantID) {
    this.merchantID = merchantID;
  }


  public Campaign name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The campaign&#39;s name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Campaign quotas(CampaignQuotas quotas) {
    this.quotas = quotas;
    return this;
  }

  /**
   * Get quotas
   * @return quotas
   */
  @javax.annotation.Nullable
  public CampaignQuotas getQuotas() {
    return quotas;
  }

  public void setQuotas(CampaignQuotas quotas) {
    this.quotas = quotas;
  }


  public Campaign conditions(CampaignConditions conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public CampaignConditions getConditions() {
    return conditions;
  }

  public void setConditions(CampaignConditions conditions) {
    this.conditions = conditions;
  }


  public Campaign discount(CampaignDiscount discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Get discount
   * @return discount
   */
  @javax.annotation.Nullable
  public CampaignDiscount getDiscount() {
    return discount;
  }

  public void setDiscount(CampaignDiscount discount) {
    this.discount = discount;
  }


  public Campaign customTag(String customTag) {
    this.customTag = customTag;
    return this;
  }

  /**
   * Specify the tag for custom bundle offer campaign. Only whitelisted partner is supported as of now.
   * @return customTag
   */
  @javax.annotation.Nullable
  public String getCustomTag() {
    return customTag;
  }

  public void setCustomTag(String customTag) {
    this.customTag = customTag;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Campaign instance itself
   */
  public Campaign putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Campaign campaign = (Campaign) o;
    return Objects.equals(this.id, campaign.id) &&
        Objects.equals(this.createdBy, campaign.createdBy) &&
        Objects.equals(this.merchantID, campaign.merchantID) &&
        Objects.equals(this.name, campaign.name) &&
        Objects.equals(this.quotas, campaign.quotas) &&
        Objects.equals(this.conditions, campaign.conditions) &&
        Objects.equals(this.discount, campaign.discount) &&
        Objects.equals(this.customTag, campaign.customTag)&&
        Objects.equals(this.additionalProperties, campaign.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdBy, merchantID, name, quotas, conditions, discount, customTag, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Campaign {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    merchantID: ").append(toIndentedString(merchantID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    quotas: ").append(toIndentedString(quotas)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    customTag: ").append(toIndentedString(customTag)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("createdBy");
    openapiFields.add("merchantID");
    openapiFields.add("name");
    openapiFields.add("quotas");
    openapiFields.add("conditions");
    openapiFields.add("discount");
    openapiFields.add("customTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("merchantID");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Campaign
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Campaign.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Campaign is not found in the empty JSON string", Campaign.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Campaign.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      // validate the required field `createdBy`
      CreatedByEnum.validateJsonElement(jsonObj.get("createdBy"));
      if (!jsonObj.get("merchantID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantID").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `quotas`
      if (jsonObj.get("quotas") != null && !jsonObj.get("quotas").isJsonNull()) {
        CampaignQuotas.validateJsonElement(jsonObj.get("quotas"));
      }
      // validate the optional field `conditions`
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        CampaignConditions.validateJsonElement(jsonObj.get("conditions"));
      }
      // validate the optional field `discount`
      if (jsonObj.get("discount") != null && !jsonObj.get("discount").isJsonNull()) {
        CampaignDiscount.validateJsonElement(jsonObj.get("discount"));
      }
      if ((jsonObj.get("customTag") != null && !jsonObj.get("customTag").isJsonNull()) && !jsonObj.get("customTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customTag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Campaign.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Campaign' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Campaign> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Campaign.class));

       return (TypeAdapter<T>) new TypeAdapter<Campaign>() {
           @Override
           public void write(JsonWriter out, Campaign value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Campaign read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Campaign instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Campaign given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Campaign
   * @throws IOException if the JSON string is invalid with respect to Campaign
   */
  public static Campaign fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Campaign.class);
  }

  /**
   * Convert an instance of Campaign to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

