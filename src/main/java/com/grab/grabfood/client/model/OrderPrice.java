// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.grab.grabfood.client.JSON;

/**
 * A JSON object containing order&#39;s price in the minor unit format.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class OrderPrice {
  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private Long subtotal;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Long tax;

  public static final String SERIALIZED_NAME_MERCHANT_CHARGE_FEE = "merchantChargeFee";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CHARGE_FEE)
  private Long merchantChargeFee;

  public static final String SERIALIZED_NAME_GRAB_FUND_PROMO = "grabFundPromo";
  @SerializedName(SERIALIZED_NAME_GRAB_FUND_PROMO)
  private Long grabFundPromo;

  public static final String SERIALIZED_NAME_MERCHANT_FUND_PROMO = "merchantFundPromo";
  @SerializedName(SERIALIZED_NAME_MERCHANT_FUND_PROMO)
  private Long merchantFundPromo;

  public static final String SERIALIZED_NAME_BASKET_PROMO = "basketPromo";
  @SerializedName(SERIALIZED_NAME_BASKET_PROMO)
  private Long basketPromo;

  public static final String SERIALIZED_NAME_DELIVERY_FEE = "deliveryFee";
  @SerializedName(SERIALIZED_NAME_DELIVERY_FEE)
  private Long deliveryFee;

  public static final String SERIALIZED_NAME_EATER_PAYMENT = "eaterPayment";
  @SerializedName(SERIALIZED_NAME_EATER_PAYMENT)
  private Long eaterPayment;

  public OrderPrice() {
  }

  public OrderPrice subtotal(Long subtotal) {
    this.subtotal = subtotal;
    return this;
  }

  /**
   * Total item and modifier price (tax-inclusive) in the minor unit. &#x60;Sum of all (Item price * quantity) | 2550*1&#x3D;2550&#x60;.
   * @return subtotal
   */
  @javax.annotation.Nonnull
  public Long getSubtotal() {
    return subtotal;
  }

  public void setSubtotal(Long subtotal) {
    this.subtotal = subtotal;
  }


  public OrderPrice tax(Long tax) {
    this.tax = tax;
    return this;
  }

  /**
   * GrabFood&#39;s tax in the minor unit. &#x60;(subtotal-merchantFundPromo)* Tax /(1+Tax) | (2550-475)*0.06/1.06&#x3D;117&#x60;. Refer to FAQs for more details about [tax](#section/Order/How-is-tax-calculated).
   * @return tax
   */
  @javax.annotation.Nullable
  public Long getTax() {
    return tax;
  }

  public void setTax(Long tax) {
    this.tax = tax;
  }


  public OrderPrice merchantChargeFee(Long merchantChargeFee) {
    this.merchantChargeFee = merchantChargeFee;
    return this;
  }

  /**
   * Any additional fee charged by merchant, which is 100% paid out to the merchant. Eg. Takeaway, packaging costs, dine-in charge.
   * @return merchantChargeFee
   */
  @javax.annotation.Nullable
  public Long getMerchantChargeFee() {
    return merchantChargeFee;
  }

  public void setMerchantChargeFee(Long merchantChargeFee) {
    this.merchantChargeFee = merchantChargeFee;
  }


  public OrderPrice grabFundPromo(Long grabFundPromo) {
    this.grabFundPromo = grabFundPromo;
    return this;
  }

  /**
   * GrabFood&#39;s promo fund in the minor unit. Calculated based on funded ratio.
   * @return grabFundPromo
   */
  @javax.annotation.Nullable
  public Long getGrabFundPromo() {
    return grabFundPromo;
  }

  public void setGrabFundPromo(Long grabFundPromo) {
    this.grabFundPromo = grabFundPromo;
  }


  public OrderPrice merchantFundPromo(Long merchantFundPromo) {
    this.merchantFundPromo = merchantFundPromo;
    return this;
  }

  /**
   * The merchant&#39;s promo fund in the minor unit. Calculated based on funded ratio.
   * @return merchantFundPromo
   */
  @javax.annotation.Nullable
  public Long getMerchantFundPromo() {
    return merchantFundPromo;
  }

  public void setMerchantFundPromo(Long merchantFundPromo) {
    this.merchantFundPromo = merchantFundPromo;
  }


  public OrderPrice basketPromo(Long basketPromo) {
    this.basketPromo = basketPromo;
    return this;
  }

  /**
   * The total amount promo applied to the basket items only (item level/order level) in the minor unit. Delivery fee is excluded. &#x60;(grabFundPromo + merchantFundPromo) | 300 + 475 &#x3D; 775&#x60; 
   * @return basketPromo
   */
  @javax.annotation.Nullable
  public Long getBasketPromo() {
    return basketPromo;
  }

  public void setBasketPromo(Long basketPromo) {
    this.basketPromo = basketPromo;
  }


  public OrderPrice deliveryFee(Long deliveryFee) {
    this.deliveryFee = deliveryFee;
    return this;
  }

  /**
   * The delivery fee in the minor unit.
   * @return deliveryFee
   */
  @javax.annotation.Nullable
  public Long getDeliveryFee() {
    return deliveryFee;
  }

  public void setDeliveryFee(Long deliveryFee) {
    this.deliveryFee = deliveryFee;
  }


  public OrderPrice eaterPayment(Long eaterPayment) {
    this.eaterPayment = eaterPayment;
    return this;
  }

  /**
   * The total amount consumer paid in the minor unit. &#x60;(subtotal + deliveryFee) - (sum of all promo) | (2550+400)-775&#x3D;2175&#x60;
   * @return eaterPayment
   */
  @javax.annotation.Nonnull
  public Long getEaterPayment() {
    return eaterPayment;
  }

  public void setEaterPayment(Long eaterPayment) {
    this.eaterPayment = eaterPayment;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrderPrice instance itself
   */
  public OrderPrice putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPrice orderPrice = (OrderPrice) o;
    return Objects.equals(this.subtotal, orderPrice.subtotal) &&
        Objects.equals(this.tax, orderPrice.tax) &&
        Objects.equals(this.merchantChargeFee, orderPrice.merchantChargeFee) &&
        Objects.equals(this.grabFundPromo, orderPrice.grabFundPromo) &&
        Objects.equals(this.merchantFundPromo, orderPrice.merchantFundPromo) &&
        Objects.equals(this.basketPromo, orderPrice.basketPromo) &&
        Objects.equals(this.deliveryFee, orderPrice.deliveryFee) &&
        Objects.equals(this.eaterPayment, orderPrice.eaterPayment)&&
        Objects.equals(this.additionalProperties, orderPrice.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subtotal, tax, merchantChargeFee, grabFundPromo, merchantFundPromo, basketPromo, deliveryFee, eaterPayment, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPrice {\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    merchantChargeFee: ").append(toIndentedString(merchantChargeFee)).append("\n");
    sb.append("    grabFundPromo: ").append(toIndentedString(grabFundPromo)).append("\n");
    sb.append("    merchantFundPromo: ").append(toIndentedString(merchantFundPromo)).append("\n");
    sb.append("    basketPromo: ").append(toIndentedString(basketPromo)).append("\n");
    sb.append("    deliveryFee: ").append(toIndentedString(deliveryFee)).append("\n");
    sb.append("    eaterPayment: ").append(toIndentedString(eaterPayment)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subtotal");
    openapiFields.add("tax");
    openapiFields.add("merchantChargeFee");
    openapiFields.add("grabFundPromo");
    openapiFields.add("merchantFundPromo");
    openapiFields.add("basketPromo");
    openapiFields.add("deliveryFee");
    openapiFields.add("eaterPayment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("subtotal");
    openapiRequiredFields.add("eaterPayment");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderPrice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderPrice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPrice is not found in the empty JSON string", OrderPrice.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderPrice.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPrice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPrice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPrice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPrice.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPrice>() {
           @Override
           public void write(JsonWriter out, OrderPrice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPrice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             OrderPrice instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderPrice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderPrice
   * @throws IOException if the JSON string is invalid with respect to OrderPrice
   */
  public static OrderPrice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPrice.class);
  }

  /**
   * Convert an instance of OrderPrice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

