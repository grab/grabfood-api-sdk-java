// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.grab.grabfood.client.model.MenuModifier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.grab.grabfood.client.JSON;

/**
 * ModifierGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class ModifierGroup {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_TRANSLATION = "nameTranslation";
  @SerializedName(SERIALIZED_NAME_NAME_TRANSLATION)
  private Map<String, String> nameTranslation = new HashMap<>();

  /**
   * The status for the ModifierGroup that is in the item.
   */
  @JsonAdapter(AvailableStatusEnum.Adapter.class)
  public enum AvailableStatusEnum {
    AVAILABLE("AVAILABLE"),
    
    UNAVAILABLE("UNAVAILABLE"),
    
    UNAVAILABLETODAY("UNAVAILABLETODAY"),
    
    HIDE("HIDE"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    AvailableStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailableStatusEnum fromValue(String value) {
      for (AvailableStatusEnum b : AvailableStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<AvailableStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailableStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailableStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailableStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailableStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABLE_STATUS = "availableStatus";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_STATUS)
  private AvailableStatusEnum availableStatus;

  public static final String SERIALIZED_NAME_SELECTION_RANGE_MIN = "selectionRangeMin";
  @SerializedName(SERIALIZED_NAME_SELECTION_RANGE_MIN)
  private Integer selectionRangeMin;

  public static final String SERIALIZED_NAME_SELECTION_RANGE_MAX = "selectionRangeMax";
  @SerializedName(SERIALIZED_NAME_SELECTION_RANGE_MAX)
  private Integer selectionRangeMax;

  public static final String SERIALIZED_NAME_MODIFIERS = "modifiers";
  @SerializedName(SERIALIZED_NAME_MODIFIERS)
  private List<MenuModifier> modifiers = new ArrayList<>();

  public ModifierGroup() {
  }

  public ModifierGroup id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ModifierGroup&#39;s ID that is on the partner system. This ID should be unique with a min length of 1 and max of 64.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ModifierGroup name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the ModifierGroup for the item that is in the parent category and section.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModifierGroup nameTranslation(Map<String, String> nameTranslation) {
    this.nameTranslation = nameTranslation;
    return this;
  }

  public ModifierGroup putNameTranslationItem(String key, String nameTranslationItem) {
    if (this.nameTranslation == null) {
      this.nameTranslation = new HashMap<>();
    }
    this.nameTranslation.put(key, nameTranslationItem);
    return this;
  }

  /**
   * Translation of the modifier group name. Only support up to 1 translated language. Refer [Menu Translation](#section/Menu-Translation).
   * @return nameTranslation
   */
  @javax.annotation.Nullable
  public Map<String, String> getNameTranslation() {
    return nameTranslation;
  }

  public void setNameTranslation(Map<String, String> nameTranslation) {
    this.nameTranslation = nameTranslation;
  }


  public ModifierGroup availableStatus(AvailableStatusEnum availableStatus) {
    this.availableStatus = availableStatus;
    return this;
  }

  /**
   * The status for the ModifierGroup that is in the item.
   * @return availableStatus
   */
  @javax.annotation.Nonnull
  public AvailableStatusEnum getAvailableStatus() {
    return availableStatus;
  }

  public void setAvailableStatus(AvailableStatusEnum availableStatus) {
    this.availableStatus = availableStatus;
  }


  public ModifierGroup selectionRangeMin(Integer selectionRangeMin) {
    this.selectionRangeMin = selectionRangeMin;
    return this;
  }

  /**
   * The minimum quantity of the attribute. Refer to FAQs for more details about [selection range](#section/Menu/What-does-the-selection-range-do).
   * @return selectionRangeMin
   */
  @javax.annotation.Nullable
  public Integer getSelectionRangeMin() {
    return selectionRangeMin;
  }

  public void setSelectionRangeMin(Integer selectionRangeMin) {
    this.selectionRangeMin = selectionRangeMin;
  }


  public ModifierGroup selectionRangeMax(Integer selectionRangeMax) {
    this.selectionRangeMax = selectionRangeMax;
    return this;
  }

  /**
   * The maximum quantity of the attribute. Refer to FAQs for more details about [selection range](#section/Menu/What-does-the-selection-range-do).
   * @return selectionRangeMax
   */
  @javax.annotation.Nonnull
  public Integer getSelectionRangeMax() {
    return selectionRangeMax;
  }

  public void setSelectionRangeMax(Integer selectionRangeMax) {
    this.selectionRangeMax = selectionRangeMax;
  }


  public ModifierGroup modifiers(List<MenuModifier> modifiers) {
    this.modifiers = modifiers;
    return this;
  }

  public ModifierGroup addModifiersItem(MenuModifier modifiersItem) {
    if (this.modifiers == null) {
      this.modifiers = new ArrayList<>();
    }
    this.modifiers.add(modifiersItem);
    return this;
  }

  /**
   * An array of modifier JSON objects. Max 100 per modifierGroup. Refer to [Modifiers](#modifiers) for more information.
   * @return modifiers
   */
  @javax.annotation.Nullable
  public List<MenuModifier> getModifiers() {
    return modifiers;
  }

  public void setModifiers(List<MenuModifier> modifiers) {
    this.modifiers = modifiers;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ModifierGroup instance itself
   */
  public ModifierGroup putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModifierGroup modifierGroup = (ModifierGroup) o;
    return Objects.equals(this.id, modifierGroup.id) &&
        Objects.equals(this.name, modifierGroup.name) &&
        Objects.equals(this.nameTranslation, modifierGroup.nameTranslation) &&
        Objects.equals(this.availableStatus, modifierGroup.availableStatus) &&
        Objects.equals(this.selectionRangeMin, modifierGroup.selectionRangeMin) &&
        Objects.equals(this.selectionRangeMax, modifierGroup.selectionRangeMax) &&
        Objects.equals(this.modifiers, modifierGroup.modifiers)&&
        Objects.equals(this.additionalProperties, modifierGroup.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, nameTranslation, availableStatus, selectionRangeMin, selectionRangeMax, modifiers, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModifierGroup {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameTranslation: ").append(toIndentedString(nameTranslation)).append("\n");
    sb.append("    availableStatus: ").append(toIndentedString(availableStatus)).append("\n");
    sb.append("    selectionRangeMin: ").append(toIndentedString(selectionRangeMin)).append("\n");
    sb.append("    selectionRangeMax: ").append(toIndentedString(selectionRangeMax)).append("\n");
    sb.append("    modifiers: ").append(toIndentedString(modifiers)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("nameTranslation");
    openapiFields.add("availableStatus");
    openapiFields.add("selectionRangeMin");
    openapiFields.add("selectionRangeMax");
    openapiFields.add("modifiers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("availableStatus");
    openapiRequiredFields.add("selectionRangeMax");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModifierGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModifierGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModifierGroup is not found in the empty JSON string", ModifierGroup.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModifierGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("availableStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableStatus").toString()));
      }
      // validate the required field `availableStatus`
      AvailableStatusEnum.validateJsonElement(jsonObj.get("availableStatus"));
      if (jsonObj.get("modifiers") != null && !jsonObj.get("modifiers").isJsonNull()) {
        JsonArray jsonArraymodifiers = jsonObj.getAsJsonArray("modifiers");
        if (jsonArraymodifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modifiers` to be an array in the JSON string but got `%s`", jsonObj.get("modifiers").toString()));
          }

          // validate the optional field `modifiers` (array)
          for (int i = 0; i < jsonArraymodifiers.size(); i++) {
            MenuModifier.validateJsonElement(jsonArraymodifiers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModifierGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModifierGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModifierGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModifierGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ModifierGroup>() {
           @Override
           public void write(JsonWriter out, ModifierGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ModifierGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ModifierGroup instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModifierGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModifierGroup
   * @throws IOException if the JSON string is invalid with respect to ModifierGroup
   */
  public static ModifierGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModifierGroup.class);
  }

  /**
   * Convert an instance of ModifierGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

