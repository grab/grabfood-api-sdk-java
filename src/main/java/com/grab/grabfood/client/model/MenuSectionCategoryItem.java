// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.grab.grabfood.client.model.AdvancedPricing;
import com.grab.grabfood.client.model.ModifierGroup;
import com.grab.grabfood.client.model.Purchasability;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.grab.grabfood.client.JSON;

/**
 * MenuSectionCategoryItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class MenuSectionCategoryItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_TRANSLATION = "nameTranslation";
  @SerializedName(SERIALIZED_NAME_NAME_TRANSLATION)
  private Map<String, String> nameTranslation = new HashMap<>();

  /**
   * The status for the item that is in the category. Refer to FAQs for more details about [availableStatus](#section/Menu/What-is-availableStatus).  Note: In order to set an item as \&quot;UNAVAILABLE\&quot;, it is required to update both the &#x60;availableStatus&#x60; and &#x60;maxStock&#x60; fields, whereby the &#x60;maxStock&#x60; value should be set to 0. 
   */
  @JsonAdapter(AvailableStatusEnum.Adapter.class)
  public enum AvailableStatusEnum {
    AVAILABLE("AVAILABLE"),
    
    UNAVAILABLE("UNAVAILABLE"),
    
    HIDE("HIDE"),
    
    UNAVAILABLETODAY("UNAVAILABLETODAY"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    AvailableStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailableStatusEnum fromValue(String value) {
      for (AvailableStatusEnum b : AvailableStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<AvailableStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailableStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailableStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailableStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailableStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABLE_STATUS = "availableStatus";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_STATUS)
  private AvailableStatusEnum availableStatus;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESCRIPTION_TRANSLATION = "descriptionTranslation";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_TRANSLATION)
  private Map<String, String> descriptionTranslation = new HashMap<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_PHOTOS = "photos";
  @SerializedName(SERIALIZED_NAME_PHOTOS)
  private List<String> photos = new ArrayList<>();

  /**
   * The item&#39;s special Tag. Refer to FAQs for more details about [specialType](#section/Menu/What&#39;s-specialType). 
   */
  @JsonAdapter(SpecialTypeEnum.Adapter.class)
  public enum SpecialTypeEnum {
    ALCOHOL("alcohol"),
    
    EMPTY(""),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    SpecialTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpecialTypeEnum fromValue(String value) {
      for (SpecialTypeEnum b : SpecialTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<SpecialTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpecialTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpecialTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpecialTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpecialTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPECIAL_TYPE = "specialType";
  @SerializedName(SERIALIZED_NAME_SPECIAL_TYPE)
  private SpecialTypeEnum specialType;

  public static final String SERIALIZED_NAME_TAXABLE = "taxable";
  @SerializedName(SERIALIZED_NAME_TAXABLE)
  private Boolean taxable;

  public static final String SERIALIZED_NAME_BARCODE = "barcode";
  @SerializedName(SERIALIZED_NAME_BARCODE)
  private String barcode;

  public static final String SERIALIZED_NAME_MAX_STOCK = "maxStock";
  @SerializedName(SERIALIZED_NAME_MAX_STOCK)
  private Integer maxStock;

  public static final String SERIALIZED_NAME_ADVANCED_PRICING = "advancedPricing";
  @SerializedName(SERIALIZED_NAME_ADVANCED_PRICING)
  private AdvancedPricing advancedPricing;

  public static final String SERIALIZED_NAME_PURCHASABILITY = "purchasability";
  @SerializedName(SERIALIZED_NAME_PURCHASABILITY)
  private Purchasability purchasability;

  public static final String SERIALIZED_NAME_MODIFIER_GROUPS = "modifierGroups";
  @SerializedName(SERIALIZED_NAME_MODIFIER_GROUPS)
  private List<ModifierGroup> modifierGroups = new ArrayList<>();

  public MenuSectionCategoryItem() {
  }

  public MenuSectionCategoryItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The item&#39;s ID in the partner system. 
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MenuSectionCategoryItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the item.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MenuSectionCategoryItem nameTranslation(Map<String, String> nameTranslation) {
    this.nameTranslation = nameTranslation;
    return this;
  }

  public MenuSectionCategoryItem putNameTranslationItem(String key, String nameTranslationItem) {
    if (this.nameTranslation == null) {
      this.nameTranslation = new HashMap<>();
    }
    this.nameTranslation.put(key, nameTranslationItem);
    return this;
  }

  /**
   * Translation of the item name. Only support up to 1 translated language. Refer [Menu Translation](#section/Menu-Translation).
   * @return nameTranslation
   */
  @javax.annotation.Nullable
  public Map<String, String> getNameTranslation() {
    return nameTranslation;
  }

  public void setNameTranslation(Map<String, String> nameTranslation) {
    this.nameTranslation = nameTranslation;
  }


  public MenuSectionCategoryItem availableStatus(AvailableStatusEnum availableStatus) {
    this.availableStatus = availableStatus;
    return this;
  }

  /**
   * The status for the item that is in the category. Refer to FAQs for more details about [availableStatus](#section/Menu/What-is-availableStatus).  Note: In order to set an item as \&quot;UNAVAILABLE\&quot;, it is required to update both the &#x60;availableStatus&#x60; and &#x60;maxStock&#x60; fields, whereby the &#x60;maxStock&#x60; value should be set to 0. 
   * @return availableStatus
   */
  @javax.annotation.Nonnull
  public AvailableStatusEnum getAvailableStatus() {
    return availableStatus;
  }

  public void setAvailableStatus(AvailableStatusEnum availableStatus) {
    this.availableStatus = availableStatus;
  }


  public MenuSectionCategoryItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the item. There is a custom length limit of 2000 for &#x60;VN&#x60;. 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MenuSectionCategoryItem descriptionTranslation(Map<String, String> descriptionTranslation) {
    this.descriptionTranslation = descriptionTranslation;
    return this;
  }

  public MenuSectionCategoryItem putDescriptionTranslationItem(String key, String descriptionTranslationItem) {
    if (this.descriptionTranslation == null) {
      this.descriptionTranslation = new HashMap<>();
    }
    this.descriptionTranslation.put(key, descriptionTranslationItem);
    return this;
  }

  /**
   * Translation of the item description. Only support up to 1 translated language. Refer [Menu Translation](#section/Menu-Translation).
   * @return descriptionTranslation
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescriptionTranslation() {
    return descriptionTranslation;
  }

  public void setDescriptionTranslation(Map<String, String> descriptionTranslation) {
    this.descriptionTranslation = descriptionTranslation;
  }


  public MenuSectionCategoryItem price(Integer price) {
    this.price = price;
    return this;
  }

  /**
   * The item&#39;s price (excluding tax) in minor format. For example: 1900 means $19 with &#x60;currency.exponent&#x60; as 2. Refer to [FAQ](#section/Menu/Is-the-item-price-with-or-without-tax) for more details. 
   * @return price
   */
  @javax.annotation.Nonnull
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }


  public MenuSectionCategoryItem photos(List<String> photos) {
    this.photos = photos;
    return this;
  }

  public MenuSectionCategoryItem addPhotosItem(String photosItem) {
    if (this.photos == null) {
      this.photos = new ArrayList<>();
    }
    this.photos.add(photosItem);
    return this;
  }

  /**
   * An array string for the item’s image URL links. Refer to FAQs for more details about [images](#section/Menu/What-are-the-recommended-formats-for-an-item-image). 
   * @return photos
   */
  @javax.annotation.Nullable
  public List<String> getPhotos() {
    return photos;
  }

  public void setPhotos(List<String> photos) {
    this.photos = photos;
  }


  public MenuSectionCategoryItem specialType(SpecialTypeEnum specialType) {
    this.specialType = specialType;
    return this;
  }

  /**
   * The item&#39;s special Tag. Refer to FAQs for more details about [specialType](#section/Menu/What&#39;s-specialType). 
   * @return specialType
   */
  @javax.annotation.Nullable
  public SpecialTypeEnum getSpecialType() {
    return specialType;
  }

  public void setSpecialType(SpecialTypeEnum specialType) {
    this.specialType = specialType;
  }


  public MenuSectionCategoryItem taxable(Boolean taxable) {
    this.taxable = taxable;
    return this;
  }

  /**
   * **For Indonesia only.** This field allows the configuration for an item to be marked as tax applicable, and marked item would then be included in a commercial invoice to consumers as per the government&#39;s regulations. 
   * @return taxable
   */
  @javax.annotation.Nullable
  public Boolean getTaxable() {
    return taxable;
  }

  public void setTaxable(Boolean taxable) {
    this.taxable = taxable;
  }


  public MenuSectionCategoryItem barcode(String barcode) {
    this.barcode = barcode;
    return this;
  }

  /**
   * The barcode Number (GTIN). Max 64 allowed. GTIN must be 8, 12, 13, 14 numeric digits. 
   * @return barcode
   */
  @javax.annotation.Nullable
  public String getBarcode() {
    return barcode;
  }

  public void setBarcode(String barcode) {
    this.barcode = barcode;
  }


  public MenuSectionCategoryItem maxStock(Integer maxStock) {
    this.maxStock = maxStock;
    return this;
  }

  /**
   * Available stocks under inventory for this item. Auto reduce when there is order placed for this item. Empty value implies no limit.  Note: It is necessary to set &#x60;maxStock&#x60; to 0 if the &#x60;availableStatus&#x60; of the item is \&quot;UNAVAILABLE\&quot;. Item will be set to \&quot;AVAILABLE\&quot; if &#x60;maxStock&#x60; &gt; 0. 
   * @return maxStock
   */
  @javax.annotation.Nullable
  public Integer getMaxStock() {
    return maxStock;
  }

  public void setMaxStock(Integer maxStock) {
    this.maxStock = maxStock;
  }


  public MenuSectionCategoryItem advancedPricing(AdvancedPricing advancedPricing) {
    this.advancedPricing = advancedPricing;
    return this;
  }

  /**
   * Get advancedPricing
   * @return advancedPricing
   */
  @javax.annotation.Nullable
  public AdvancedPricing getAdvancedPricing() {
    return advancedPricing;
  }

  public void setAdvancedPricing(AdvancedPricing advancedPricing) {
    this.advancedPricing = advancedPricing;
  }


  public MenuSectionCategoryItem purchasability(Purchasability purchasability) {
    this.purchasability = purchasability;
    return this;
  }

  /**
   * Get purchasability
   * @return purchasability
   */
  @javax.annotation.Nullable
  public Purchasability getPurchasability() {
    return purchasability;
  }

  public void setPurchasability(Purchasability purchasability) {
    this.purchasability = purchasability;
  }


  public MenuSectionCategoryItem modifierGroups(List<ModifierGroup> modifierGroups) {
    this.modifierGroups = modifierGroups;
    return this;
  }

  public MenuSectionCategoryItem addModifierGroupsItem(ModifierGroup modifierGroupsItem) {
    if (this.modifierGroups == null) {
      this.modifierGroups = new ArrayList<>();
    }
    this.modifierGroups.add(modifierGroupsItem);
    return this;
  }

  /**
   * An array of the modifierGroup JSON objects. Max 30 allowed per item. Refer to [Modifier groups](#modifier-groups) for more information.
   * @return modifierGroups
   */
  @javax.annotation.Nullable
  public List<ModifierGroup> getModifierGroups() {
    return modifierGroups;
  }

  public void setModifierGroups(List<ModifierGroup> modifierGroups) {
    this.modifierGroups = modifierGroups;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MenuSectionCategoryItem instance itself
   */
  public MenuSectionCategoryItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MenuSectionCategoryItem menuSectionCategoryItem = (MenuSectionCategoryItem) o;
    return Objects.equals(this.id, menuSectionCategoryItem.id) &&
        Objects.equals(this.name, menuSectionCategoryItem.name) &&
        Objects.equals(this.nameTranslation, menuSectionCategoryItem.nameTranslation) &&
        Objects.equals(this.availableStatus, menuSectionCategoryItem.availableStatus) &&
        Objects.equals(this.description, menuSectionCategoryItem.description) &&
        Objects.equals(this.descriptionTranslation, menuSectionCategoryItem.descriptionTranslation) &&
        Objects.equals(this.price, menuSectionCategoryItem.price) &&
        Objects.equals(this.photos, menuSectionCategoryItem.photos) &&
        Objects.equals(this.specialType, menuSectionCategoryItem.specialType) &&
        Objects.equals(this.taxable, menuSectionCategoryItem.taxable) &&
        Objects.equals(this.barcode, menuSectionCategoryItem.barcode) &&
        Objects.equals(this.maxStock, menuSectionCategoryItem.maxStock) &&
        Objects.equals(this.advancedPricing, menuSectionCategoryItem.advancedPricing) &&
        Objects.equals(this.purchasability, menuSectionCategoryItem.purchasability) &&
        Objects.equals(this.modifierGroups, menuSectionCategoryItem.modifierGroups)&&
        Objects.equals(this.additionalProperties, menuSectionCategoryItem.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, nameTranslation, availableStatus, description, descriptionTranslation, price, photos, specialType, taxable, barcode, maxStock, advancedPricing, purchasability, modifierGroups, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MenuSectionCategoryItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameTranslation: ").append(toIndentedString(nameTranslation)).append("\n");
    sb.append("    availableStatus: ").append(toIndentedString(availableStatus)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionTranslation: ").append(toIndentedString(descriptionTranslation)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    photos: ").append(toIndentedString(photos)).append("\n");
    sb.append("    specialType: ").append(toIndentedString(specialType)).append("\n");
    sb.append("    taxable: ").append(toIndentedString(taxable)).append("\n");
    sb.append("    barcode: ").append(toIndentedString(barcode)).append("\n");
    sb.append("    maxStock: ").append(toIndentedString(maxStock)).append("\n");
    sb.append("    advancedPricing: ").append(toIndentedString(advancedPricing)).append("\n");
    sb.append("    purchasability: ").append(toIndentedString(purchasability)).append("\n");
    sb.append("    modifierGroups: ").append(toIndentedString(modifierGroups)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("nameTranslation");
    openapiFields.add("availableStatus");
    openapiFields.add("description");
    openapiFields.add("descriptionTranslation");
    openapiFields.add("price");
    openapiFields.add("photos");
    openapiFields.add("specialType");
    openapiFields.add("taxable");
    openapiFields.add("barcode");
    openapiFields.add("maxStock");
    openapiFields.add("advancedPricing");
    openapiFields.add("purchasability");
    openapiFields.add("modifierGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("availableStatus");
    openapiRequiredFields.add("price");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MenuSectionCategoryItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MenuSectionCategoryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MenuSectionCategoryItem is not found in the empty JSON string", MenuSectionCategoryItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MenuSectionCategoryItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("availableStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableStatus").toString()));
      }
      // validate the required field `availableStatus`
      AvailableStatusEnum.validateJsonElement(jsonObj.get("availableStatus"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("photos") != null && !jsonObj.get("photos").isJsonNull() && !jsonObj.get("photos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `photos` to be an array in the JSON string but got `%s`", jsonObj.get("photos").toString()));
      }
      if ((jsonObj.get("specialType") != null && !jsonObj.get("specialType").isJsonNull()) && !jsonObj.get("specialType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specialType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specialType").toString()));
      }
      // validate the optional field `specialType`
      if (jsonObj.get("specialType") != null && !jsonObj.get("specialType").isJsonNull()) {
        SpecialTypeEnum.validateJsonElement(jsonObj.get("specialType"));
      }
      if ((jsonObj.get("barcode") != null && !jsonObj.get("barcode").isJsonNull()) && !jsonObj.get("barcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `barcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("barcode").toString()));
      }
      // validate the optional field `advancedPricing`
      if (jsonObj.get("advancedPricing") != null && !jsonObj.get("advancedPricing").isJsonNull()) {
        AdvancedPricing.validateJsonElement(jsonObj.get("advancedPricing"));
      }
      // validate the optional field `purchasability`
      if (jsonObj.get("purchasability") != null && !jsonObj.get("purchasability").isJsonNull()) {
        Purchasability.validateJsonElement(jsonObj.get("purchasability"));
      }
      if (jsonObj.get("modifierGroups") != null && !jsonObj.get("modifierGroups").isJsonNull()) {
        JsonArray jsonArraymodifierGroups = jsonObj.getAsJsonArray("modifierGroups");
        if (jsonArraymodifierGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modifierGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modifierGroups` to be an array in the JSON string but got `%s`", jsonObj.get("modifierGroups").toString()));
          }

          // validate the optional field `modifierGroups` (array)
          for (int i = 0; i < jsonArraymodifierGroups.size(); i++) {
            ModifierGroup.validateJsonElement(jsonArraymodifierGroups.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MenuSectionCategoryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MenuSectionCategoryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MenuSectionCategoryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MenuSectionCategoryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<MenuSectionCategoryItem>() {
           @Override
           public void write(JsonWriter out, MenuSectionCategoryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MenuSectionCategoryItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             MenuSectionCategoryItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MenuSectionCategoryItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MenuSectionCategoryItem
   * @throws IOException if the JSON string is invalid with respect to MenuSectionCategoryItem
   */
  public static MenuSectionCategoryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MenuSectionCategoryItem.class);
  }

  /**
   * Convert an instance of MenuSectionCategoryItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

