// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.grab.grabfood.client.model.Currency;
import com.grab.grabfood.client.model.DineIn;
import com.grab.grabfood.client.model.OrderCampaign;
import com.grab.grabfood.client.model.OrderFeatureFlags;
import com.grab.grabfood.client.model.OrderItem;
import com.grab.grabfood.client.model.OrderPrice;
import com.grab.grabfood.client.model.OrderPromo;
import com.grab.grabfood.client.model.OrderReadyEstimation;
import com.grab.grabfood.client.model.Receiver;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.grab.grabfood.client.JSON;

/**
 * A JSON object containing the order information. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class Order {
  public static final String SERIALIZED_NAME_ORDER_I_D = "orderID";
  @SerializedName(SERIALIZED_NAME_ORDER_I_D)
  private String orderID;

  public static final String SERIALIZED_NAME_SHORT_ORDER_NUMBER = "shortOrderNumber";
  @SerializedName(SERIALIZED_NAME_SHORT_ORDER_NUMBER)
  private String shortOrderNumber;

  public static final String SERIALIZED_NAME_MERCHANT_I_D = "merchantID";
  @SerializedName(SERIALIZED_NAME_MERCHANT_I_D)
  private String merchantID;

  public static final String SERIALIZED_NAME_PARTNER_MERCHANT_I_D = "partnerMerchantID";
  @SerializedName(SERIALIZED_NAME_PARTNER_MERCHANT_I_D)
  private String partnerMerchantID;

  /**
   * The payment method used. Refer to FAQs for more details about [paymentType](#section/Order/Does-the-paymentType-affect-partners).
   */
  @JsonAdapter(PaymentTypeEnum.Adapter.class)
  public enum PaymentTypeEnum {
    CASH("CASH"),
    
    CASHLESS("CASHLESS"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentTypeEnum fromValue(String value) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<PaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentTypeEnum paymentType;

  public static final String SERIALIZED_NAME_CUTLERY = "cutlery";
  @SerializedName(SERIALIZED_NAME_CUTLERY)
  private Boolean cutlery;

  public static final String SERIALIZED_NAME_ORDER_TIME = "orderTime";
  @SerializedName(SERIALIZED_NAME_ORDER_TIME)
  private String orderTime;

  public static final String SERIALIZED_NAME_SUBMIT_TIME = "submitTime";
  @SerializedName(SERIALIZED_NAME_SUBMIT_TIME)
  private OffsetDateTime submitTime;

  public static final String SERIALIZED_NAME_COMPLETE_TIME = "completeTime";
  @SerializedName(SERIALIZED_NAME_COMPLETE_TIME)
  private OffsetDateTime completeTime;

  public static final String SERIALIZED_NAME_SCHEDULED_TIME = "scheduledTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME)
  private String scheduledTime;

  public static final String SERIALIZED_NAME_ORDER_STATE = "orderState";
  @SerializedName(SERIALIZED_NAME_ORDER_STATE)
  private String orderState;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_FEATURE_FLAGS = "featureFlags";
  @SerializedName(SERIALIZED_NAME_FEATURE_FLAGS)
  private OrderFeatureFlags featureFlags;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OrderItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAMPAIGNS = "campaigns";
  @SerializedName(SERIALIZED_NAME_CAMPAIGNS)
  private List<OrderCampaign> campaigns;

  public static final String SERIALIZED_NAME_PROMOS = "promos";
  @SerializedName(SERIALIZED_NAME_PROMOS)
  private List<OrderPromo> promos = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private OrderPrice price;

  public static final String SERIALIZED_NAME_DINE_IN = "dineIn";
  @SerializedName(SERIALIZED_NAME_DINE_IN)
  private DineIn dineIn;

  public static final String SERIALIZED_NAME_RECEIVER = "receiver";
  @SerializedName(SERIALIZED_NAME_RECEIVER)
  private Receiver receiver;

  public static final String SERIALIZED_NAME_ORDER_READY_ESTIMATION = "orderReadyEstimation";
  @SerializedName(SERIALIZED_NAME_ORDER_READY_ESTIMATION)
  private OrderReadyEstimation orderReadyEstimation;

  public static final String SERIALIZED_NAME_MEMBERSHIP_I_D = "membershipID";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_I_D)
  private String membershipID;

  public Order() {
  }

  public Order orderID(String orderID) {
    this.orderID = orderID;
    return this;
  }

  /**
   * The order&#39;s ID that is returned from GrabFood. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What&#39;s-the-difference-between-orderID-and-shortOrderNumber).
   * @return orderID
   */
  @javax.annotation.Nonnull
  public String getOrderID() {
    return orderID;
  }

  public void setOrderID(String orderID) {
    this.orderID = orderID;
  }


  public Order shortOrderNumber(String shortOrderNumber) {
    this.shortOrderNumber = shortOrderNumber;
    return this;
  }

  /**
   * The GrabFood short order number. This is unique for each merchant per day. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What&#39;s-the-difference-between-orderID-and-shortOrderNumber).
   * @return shortOrderNumber
   */
  @javax.annotation.Nonnull
  public String getShortOrderNumber() {
    return shortOrderNumber;
  }

  public void setShortOrderNumber(String shortOrderNumber) {
    this.shortOrderNumber = shortOrderNumber;
  }


  public Order merchantID(String merchantID) {
    this.merchantID = merchantID;
    return this;
  }

  /**
   * The merchant&#39;s ID that is in GrabFood&#39;s database.
   * @return merchantID
   */
  @javax.annotation.Nonnull
  public String getMerchantID() {
    return merchantID;
  }

  public void setMerchantID(String merchantID) {
    this.merchantID = merchantID;
  }


  public Order partnerMerchantID(String partnerMerchantID) {
    this.partnerMerchantID = partnerMerchantID;
    return this;
  }

  /**
   * The merchant&#39;s ID that is on the partner&#39;s database.
   * @return partnerMerchantID
   */
  @javax.annotation.Nullable
  public String getPartnerMerchantID() {
    return partnerMerchantID;
  }

  public void setPartnerMerchantID(String partnerMerchantID) {
    this.partnerMerchantID = partnerMerchantID;
  }


  public Order paymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * The payment method used. Refer to FAQs for more details about [paymentType](#section/Order/Does-the-paymentType-affect-partners).
   * @return paymentType
   */
  @javax.annotation.Nonnull
  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
  }


  public Order cutlery(Boolean cutlery) {
    this.cutlery = cutlery;
    return this;
  }

  /**
   * The boolean value to indicate whether cutlery are needed or not. Refer to FAQs for more details about [cutlery](#section/Order/What-do-the-true-or-false-values-mean-for-cutlery).
   * @return cutlery
   */
  @javax.annotation.Nonnull
  public Boolean getCutlery() {
    return cutlery;
  }

  public void setCutlery(Boolean cutlery) {
    this.cutlery = cutlery;
  }


  public Order orderTime(String orderTime) {
    this.orderTime = orderTime;
    return this;
  }

  /**
   * The UTC time that a consumer places the order, based on ISO_8601/RFC3339.
   * @return orderTime
   */
  @javax.annotation.Nonnull
  public String getOrderTime() {
    return orderTime;
  }

  public void setOrderTime(String orderTime) {
    this.orderTime = orderTime;
  }


  public Order submitTime(OffsetDateTime submitTime) {
    this.submitTime = submitTime;
    return this;
  }

  /**
   * The order submit time, based on ISO_8601/RFC3339. Only present in the [List Orders](#tag/list-order) response.
   * @return submitTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmitTime() {
    return submitTime;
  }

  public void setSubmitTime(OffsetDateTime submitTime) {
    this.submitTime = submitTime;
  }


  public Order completeTime(OffsetDateTime completeTime) {
    this.completeTime = completeTime;
    return this;
  }

  /**
   * The order complete time, based on ISO_8601/RFC3339. Only present in the [List Orders](#tag/list-order) response.
   * @return completeTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompleteTime() {
    return completeTime;
  }

  public void setCompleteTime(OffsetDateTime completeTime) {
    this.completeTime = completeTime;
  }


  public Order scheduledTime(String scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

  /**
   * The order scheduled time, based on ISO_8601/RFC3339. Empty for non-scheduled orders.
   * @return scheduledTime
   */
  @javax.annotation.Nullable
  public String getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(String scheduledTime) {
    this.scheduledTime = scheduledTime;
  }


  public Order orderState(String orderState) {
    this.orderState = orderState;
    return this;
  }

  /**
   * The state of the order. Only present in the [List Orders](#tag/list-order) response. Refer to [Order States](#section/Order-states).
   * @return orderState
   */
  @javax.annotation.Nullable
  public String getOrderState() {
    return orderState;
  }

  public void setOrderState(String orderState) {
    this.orderState = orderState;
  }


  public Order currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nonnull
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public Order featureFlags(OrderFeatureFlags featureFlags) {
    this.featureFlags = featureFlags;
    return this;
  }

  /**
   * Get featureFlags
   * @return featureFlags
   */
  @javax.annotation.Nonnull
  public OrderFeatureFlags getFeatureFlags() {
    return featureFlags;
  }

  public void setFeatureFlags(OrderFeatureFlags featureFlags) {
    this.featureFlags = featureFlags;
  }


  public Order items(List<OrderItem> items) {
    this.items = items;
    return this;
  }

  public Order addItemsItem(OrderItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * The items in an array of JSON Object. Refer to [Items](#items) for more information.
   * @return items
   */
  @javax.annotation.Nonnull
  public List<OrderItem> getItems() {
    return items;
  }

  public void setItems(List<OrderItem> items) {
    this.items = items;
  }


  public Order campaigns(List<OrderCampaign> campaigns) {
    this.campaigns = campaigns;
    return this;
  }

  public Order addCampaignsItem(OrderCampaign campaignsItem) {
    if (this.campaigns == null) {
      this.campaigns = new ArrayList<>();
    }
    this.campaigns.add(campaignsItem);
    return this;
  }

  /**
   * The campaigns that are applicable for the order.&#x60;null&#x60; when there is no campaign applied. 
   * @return campaigns
   */
  @javax.annotation.Nullable
  public List<OrderCampaign> getCampaigns() {
    return campaigns;
  }

  public void setCampaigns(List<OrderCampaign> campaigns) {
    this.campaigns = campaigns;
  }


  public Order promos(List<OrderPromo> promos) {
    this.promos = promos;
    return this;
  }

  public Order addPromosItem(OrderPromo promosItem) {
    if (this.promos == null) {
      this.promos = new ArrayList<>();
    }
    this.promos.add(promosItem);
    return this;
  }

  /**
   * An array of promotion objects. Only promotions that are funded by merchants will be sent.
   * @return promos
   */
  @javax.annotation.Nullable
  public List<OrderPromo> getPromos() {
    return promos;
  }

  public void setPromos(List<OrderPromo> promos) {
    this.promos = promos;
  }


  public Order price(OrderPrice price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nonnull
  public OrderPrice getPrice() {
    return price;
  }

  public void setPrice(OrderPrice price) {
    this.price = price;
  }


  public Order dineIn(DineIn dineIn) {
    this.dineIn = dineIn;
    return this;
  }

  /**
   * Get dineIn
   * @return dineIn
   */
  @javax.annotation.Nullable
  public DineIn getDineIn() {
    return dineIn;
  }

  public void setDineIn(DineIn dineIn) {
    this.dineIn = dineIn;
  }


  public Order receiver(Receiver receiver) {
    this.receiver = receiver;
    return this;
  }

  /**
   * Get receiver
   * @return receiver
   */
  @javax.annotation.Nullable
  public Receiver getReceiver() {
    return receiver;
  }

  public void setReceiver(Receiver receiver) {
    this.receiver = receiver;
  }


  public Order orderReadyEstimation(OrderReadyEstimation orderReadyEstimation) {
    this.orderReadyEstimation = orderReadyEstimation;
    return this;
  }

  /**
   * Get orderReadyEstimation
   * @return orderReadyEstimation
   */
  @javax.annotation.Nullable
  public OrderReadyEstimation getOrderReadyEstimation() {
    return orderReadyEstimation;
  }

  public void setOrderReadyEstimation(OrderReadyEstimation orderReadyEstimation) {
    this.orderReadyEstimation = orderReadyEstimation;
  }


  public Order membershipID(String membershipID) {
    this.membershipID = membershipID;
    return this;
  }

  /**
   * Membership ID for loyalty project. Only present for loyalty program partners.
   * @return membershipID
   */
  @javax.annotation.Nullable
  public String getMembershipID() {
    return membershipID;
  }

  public void setMembershipID(String membershipID) {
    this.membershipID = membershipID;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Order instance itself
   */
  public Order putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.orderID, order.orderID) &&
        Objects.equals(this.shortOrderNumber, order.shortOrderNumber) &&
        Objects.equals(this.merchantID, order.merchantID) &&
        Objects.equals(this.partnerMerchantID, order.partnerMerchantID) &&
        Objects.equals(this.paymentType, order.paymentType) &&
        Objects.equals(this.cutlery, order.cutlery) &&
        Objects.equals(this.orderTime, order.orderTime) &&
        Objects.equals(this.submitTime, order.submitTime) &&
        Objects.equals(this.completeTime, order.completeTime) &&
        Objects.equals(this.scheduledTime, order.scheduledTime) &&
        Objects.equals(this.orderState, order.orderState) &&
        Objects.equals(this.currency, order.currency) &&
        Objects.equals(this.featureFlags, order.featureFlags) &&
        Objects.equals(this.items, order.items) &&
        Objects.equals(this.campaigns, order.campaigns) &&
        Objects.equals(this.promos, order.promos) &&
        Objects.equals(this.price, order.price) &&
        Objects.equals(this.dineIn, order.dineIn) &&
        Objects.equals(this.receiver, order.receiver) &&
        Objects.equals(this.orderReadyEstimation, order.orderReadyEstimation) &&
        Objects.equals(this.membershipID, order.membershipID)&&
        Objects.equals(this.additionalProperties, order.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderID, shortOrderNumber, merchantID, partnerMerchantID, paymentType, cutlery, orderTime, submitTime, completeTime, scheduledTime, orderState, currency, featureFlags, items, campaigns, promos, price, dineIn, receiver, orderReadyEstimation, membershipID, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    orderID: ").append(toIndentedString(orderID)).append("\n");
    sb.append("    shortOrderNumber: ").append(toIndentedString(shortOrderNumber)).append("\n");
    sb.append("    merchantID: ").append(toIndentedString(merchantID)).append("\n");
    sb.append("    partnerMerchantID: ").append(toIndentedString(partnerMerchantID)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    cutlery: ").append(toIndentedString(cutlery)).append("\n");
    sb.append("    orderTime: ").append(toIndentedString(orderTime)).append("\n");
    sb.append("    submitTime: ").append(toIndentedString(submitTime)).append("\n");
    sb.append("    completeTime: ").append(toIndentedString(completeTime)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    orderState: ").append(toIndentedString(orderState)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    featureFlags: ").append(toIndentedString(featureFlags)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    campaigns: ").append(toIndentedString(campaigns)).append("\n");
    sb.append("    promos: ").append(toIndentedString(promos)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    dineIn: ").append(toIndentedString(dineIn)).append("\n");
    sb.append("    receiver: ").append(toIndentedString(receiver)).append("\n");
    sb.append("    orderReadyEstimation: ").append(toIndentedString(orderReadyEstimation)).append("\n");
    sb.append("    membershipID: ").append(toIndentedString(membershipID)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orderID");
    openapiFields.add("shortOrderNumber");
    openapiFields.add("merchantID");
    openapiFields.add("partnerMerchantID");
    openapiFields.add("paymentType");
    openapiFields.add("cutlery");
    openapiFields.add("orderTime");
    openapiFields.add("submitTime");
    openapiFields.add("completeTime");
    openapiFields.add("scheduledTime");
    openapiFields.add("orderState");
    openapiFields.add("currency");
    openapiFields.add("featureFlags");
    openapiFields.add("items");
    openapiFields.add("campaigns");
    openapiFields.add("promos");
    openapiFields.add("price");
    openapiFields.add("dineIn");
    openapiFields.add("receiver");
    openapiFields.add("orderReadyEstimation");
    openapiFields.add("membershipID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("orderID");
    openapiRequiredFields.add("shortOrderNumber");
    openapiRequiredFields.add("merchantID");
    openapiRequiredFields.add("paymentType");
    openapiRequiredFields.add("cutlery");
    openapiRequiredFields.add("orderTime");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("featureFlags");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("price");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Order
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Order.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("orderID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderID").toString()));
      }
      if (!jsonObj.get("shortOrderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortOrderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortOrderNumber").toString()));
      }
      if (!jsonObj.get("merchantID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantID").toString()));
      }
      if ((jsonObj.get("partnerMerchantID") != null && !jsonObj.get("partnerMerchantID").isJsonNull()) && !jsonObj.get("partnerMerchantID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerMerchantID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerMerchantID").toString()));
      }
      if (!jsonObj.get("paymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentType").toString()));
      }
      // validate the required field `paymentType`
      PaymentTypeEnum.validateJsonElement(jsonObj.get("paymentType"));
      if (!jsonObj.get("orderTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderTime").toString()));
      }
      if ((jsonObj.get("scheduledTime") != null && !jsonObj.get("scheduledTime").isJsonNull()) && !jsonObj.get("scheduledTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduledTime").toString()));
      }
      if ((jsonObj.get("orderState") != null && !jsonObj.get("orderState").isJsonNull()) && !jsonObj.get("orderState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderState").toString()));
      }
      // validate the required field `currency`
      Currency.validateJsonElement(jsonObj.get("currency"));
      // validate the required field `featureFlags`
      OrderFeatureFlags.validateJsonElement(jsonObj.get("featureFlags"));
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        OrderItem.validateJsonElement(jsonArrayitems.get(i));
      };
      if (jsonObj.get("campaigns") != null && !jsonObj.get("campaigns").isJsonNull()) {
        JsonArray jsonArraycampaigns = jsonObj.getAsJsonArray("campaigns");
        if (jsonArraycampaigns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("campaigns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `campaigns` to be an array in the JSON string but got `%s`", jsonObj.get("campaigns").toString()));
          }

          // validate the optional field `campaigns` (array)
          for (int i = 0; i < jsonArraycampaigns.size(); i++) {
            OrderCampaign.validateJsonElement(jsonArraycampaigns.get(i));
          };
        }
      }
      if (jsonObj.get("promos") != null && !jsonObj.get("promos").isJsonNull()) {
        JsonArray jsonArraypromos = jsonObj.getAsJsonArray("promos");
        if (jsonArraypromos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promos` to be an array in the JSON string but got `%s`", jsonObj.get("promos").toString()));
          }

          // validate the optional field `promos` (array)
          for (int i = 0; i < jsonArraypromos.size(); i++) {
            OrderPromo.validateJsonElement(jsonArraypromos.get(i));
          };
        }
      }
      // validate the required field `price`
      OrderPrice.validateJsonElement(jsonObj.get("price"));
      // validate the optional field `dineIn`
      if (jsonObj.get("dineIn") != null && !jsonObj.get("dineIn").isJsonNull()) {
        DineIn.validateJsonElement(jsonObj.get("dineIn"));
      }
      // validate the optional field `receiver`
      if (jsonObj.get("receiver") != null && !jsonObj.get("receiver").isJsonNull()) {
        Receiver.validateJsonElement(jsonObj.get("receiver"));
      }
      // validate the optional field `orderReadyEstimation`
      if (jsonObj.get("orderReadyEstimation") != null && !jsonObj.get("orderReadyEstimation").isJsonNull()) {
        OrderReadyEstimation.validateJsonElement(jsonObj.get("orderReadyEstimation"));
      }
      if ((jsonObj.get("membershipID") != null && !jsonObj.get("membershipID").isJsonNull()) && !jsonObj.get("membershipID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `membershipID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("membershipID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Order instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Order given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Order
   * @throws IOException if the JSON string is invalid with respect to Order
   */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

  /**
   * Convert an instance of Order to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

