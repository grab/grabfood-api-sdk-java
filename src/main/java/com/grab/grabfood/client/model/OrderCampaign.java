// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.grab.grabfood.client.model.OrderFreeItem;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.grab.grabfood.client.JSON;

/**
 * OrderCampaign
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class OrderCampaign {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CAMPAIGN_NAME_FOR_MEX = "campaignNameForMex";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_NAME_FOR_MEX)
  private String campaignNameForMex;

  /**
   * The campaign level.
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    ITEM("item"),
    
    CATEGORY("category"),
    
    ORDER("order"),
    
    DELIVERY_FEE("delivery_fee"),
    
    BUNDLE("bundle"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelEnum fromValue(String value) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private LevelEnum level;

  /**
   * The type of campaign.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PERCENTAGE("percentage"),
    
    NET("net"),
    
    DELIVERY("delivery"),
    
    FREE_ITEM("freeItem"),
    
    BUNDLE_SAME_NET("bundleSameNet"),
    
    BUNDLE_SAME_PERCENTAGE("bundleSamePercentage"),
    
    BUNDLE_SAME_FIX_PRICE("bundleSameFixPrice"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USAGE_COUNT = "usageCount";
  @SerializedName(SERIALIZED_NAME_USAGE_COUNT)
  private Long usageCount;

  public static final String SERIALIZED_NAME_MEX_FUNDED_RATIO = "mexFundedRatio";
  @SerializedName(SERIALIZED_NAME_MEX_FUNDED_RATIO)
  private Integer mexFundedRatio;

  public static final String SERIALIZED_NAME_DEDUCTED_AMOUNT = "deductedAmount";
  @SerializedName(SERIALIZED_NAME_DEDUCTED_AMOUNT)
  private Long deductedAmount;

  /**
   * The part that the campaign is applied.
   */
  @JsonAdapter(DeductedPartEnum.Adapter.class)
  public enum DeductedPartEnum {
    BASKET_AMOUNT("basket_amount"),
    
    DELIVERY_FEE("delivery_fee"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    DeductedPartEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeductedPartEnum fromValue(String value) {
      for (DeductedPartEnum b : DeductedPartEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<DeductedPartEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeductedPartEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeductedPartEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeductedPartEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeductedPartEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEDUCTED_PART = "deductedPart";
  @SerializedName(SERIALIZED_NAME_DEDUCTED_PART)
  private DeductedPartEnum deductedPart;

  public static final String SERIALIZED_NAME_APPLIED_ITEM_I_DS = "appliedItemIDs";
  @SerializedName(SERIALIZED_NAME_APPLIED_ITEM_I_DS)
  private List<String> appliedItemIDs;

  public static final String SERIALIZED_NAME_FREE_ITEM = "freeItem";
  @SerializedName(SERIALIZED_NAME_FREE_ITEM)
  private OrderFreeItem freeItem;

  public OrderCampaign() {
  }

  public OrderCampaign id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The campaign&#39;s ID returned by GrabFood upon campaign creation.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OrderCampaign name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the campaign. This campaign name has been automatically generated by Grab for display in the customer app.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrderCampaign campaignNameForMex(String campaignNameForMex) {
    this.campaignNameForMex = campaignNameForMex;
    return this;
  }

  /**
   * The campaign name provided by the merchant in [Create Campaign](#tag/create-campaign). Whitelist required, reach out to your integration manager.
   * @return campaignNameForMex
   */
  @javax.annotation.Nullable
  public String getCampaignNameForMex() {
    return campaignNameForMex;
  }

  public void setCampaignNameForMex(String campaignNameForMex) {
    this.campaignNameForMex = campaignNameForMex;
  }


  public OrderCampaign level(LevelEnum level) {
    this.level = level;
    return this;
  }

  /**
   * The campaign level.
   * @return level
   */
  @javax.annotation.Nullable
  public LevelEnum getLevel() {
    return level;
  }

  public void setLevel(LevelEnum level) {
    this.level = level;
  }


  public OrderCampaign type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of campaign.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public OrderCampaign usageCount(Long usageCount) {
    this.usageCount = usageCount;
    return this;
  }

  /**
   * The campaign redemption count in this order.
   * @return usageCount
   */
  @javax.annotation.Nullable
  public Long getUsageCount() {
    return usageCount;
  }

  public void setUsageCount(Long usageCount) {
    this.usageCount = usageCount;
  }


  public OrderCampaign mexFundedRatio(Integer mexFundedRatio) {
    this.mexFundedRatio = mexFundedRatio;
    return this;
  }

  /**
   * The ratio funded by the merchant in percentage.
   * @return mexFundedRatio
   */
  @javax.annotation.Nullable
  public Integer getMexFundedRatio() {
    return mexFundedRatio;
  }

  public void setMexFundedRatio(Integer mexFundedRatio) {
    this.mexFundedRatio = mexFundedRatio;
  }


  public OrderCampaign deductedAmount(Long deductedAmount) {
    this.deductedAmount = deductedAmount;
    return this;
  }

  /**
   * The deducted amount in minor unit format. &#x60;Item price(tax inclusive) * 20% discount | 2375*0.2&#x60;
   * @return deductedAmount
   */
  @javax.annotation.Nullable
  public Long getDeductedAmount() {
    return deductedAmount;
  }

  public void setDeductedAmount(Long deductedAmount) {
    this.deductedAmount = deductedAmount;
  }


  public OrderCampaign deductedPart(DeductedPartEnum deductedPart) {
    this.deductedPart = deductedPart;
    return this;
  }

  /**
   * The part that the campaign is applied.
   * @return deductedPart
   */
  @javax.annotation.Nullable
  public DeductedPartEnum getDeductedPart() {
    return deductedPart;
  }

  public void setDeductedPart(DeductedPartEnum deductedPart) {
    this.deductedPart = deductedPart;
  }


  public OrderCampaign appliedItemIDs(List<String> appliedItemIDs) {
    this.appliedItemIDs = appliedItemIDs;
    return this;
  }

  public OrderCampaign addAppliedItemIDsItem(String appliedItemIDsItem) {
    if (this.appliedItemIDs == null) {
      this.appliedItemIDs = new ArrayList<>();
    }
    this.appliedItemIDs.add(appliedItemIDsItem);
    return this;
  }

  /**
   * An array of item IDs that get discount under this campaign. &#x60;null&#x60; if no item applied in this campaign.
   * @return appliedItemIDs
   */
  @javax.annotation.Nullable
  public List<String> getAppliedItemIDs() {
    return appliedItemIDs;
  }

  public void setAppliedItemIDs(List<String> appliedItemIDs) {
    this.appliedItemIDs = appliedItemIDs;
  }


  public OrderCampaign freeItem(OrderFreeItem freeItem) {
    this.freeItem = freeItem;
    return this;
  }

  /**
   * Get freeItem
   * @return freeItem
   */
  @javax.annotation.Nullable
  public OrderFreeItem getFreeItem() {
    return freeItem;
  }

  public void setFreeItem(OrderFreeItem freeItem) {
    this.freeItem = freeItem;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrderCampaign instance itself
   */
  public OrderCampaign putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderCampaign orderCampaign = (OrderCampaign) o;
    return Objects.equals(this.id, orderCampaign.id) &&
        Objects.equals(this.name, orderCampaign.name) &&
        Objects.equals(this.campaignNameForMex, orderCampaign.campaignNameForMex) &&
        Objects.equals(this.level, orderCampaign.level) &&
        Objects.equals(this.type, orderCampaign.type) &&
        Objects.equals(this.usageCount, orderCampaign.usageCount) &&
        Objects.equals(this.mexFundedRatio, orderCampaign.mexFundedRatio) &&
        Objects.equals(this.deductedAmount, orderCampaign.deductedAmount) &&
        Objects.equals(this.deductedPart, orderCampaign.deductedPart) &&
        Objects.equals(this.appliedItemIDs, orderCampaign.appliedItemIDs) &&
        Objects.equals(this.freeItem, orderCampaign.freeItem)&&
        Objects.equals(this.additionalProperties, orderCampaign.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, campaignNameForMex, level, type, usageCount, mexFundedRatio, deductedAmount, deductedPart, appliedItemIDs, freeItem, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderCampaign {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    campaignNameForMex: ").append(toIndentedString(campaignNameForMex)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    usageCount: ").append(toIndentedString(usageCount)).append("\n");
    sb.append("    mexFundedRatio: ").append(toIndentedString(mexFundedRatio)).append("\n");
    sb.append("    deductedAmount: ").append(toIndentedString(deductedAmount)).append("\n");
    sb.append("    deductedPart: ").append(toIndentedString(deductedPart)).append("\n");
    sb.append("    appliedItemIDs: ").append(toIndentedString(appliedItemIDs)).append("\n");
    sb.append("    freeItem: ").append(toIndentedString(freeItem)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("campaignNameForMex");
    openapiFields.add("level");
    openapiFields.add("type");
    openapiFields.add("usageCount");
    openapiFields.add("mexFundedRatio");
    openapiFields.add("deductedAmount");
    openapiFields.add("deductedPart");
    openapiFields.add("appliedItemIDs");
    openapiFields.add("freeItem");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderCampaign
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderCampaign.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderCampaign is not found in the empty JSON string", OrderCampaign.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("campaignNameForMex") != null && !jsonObj.get("campaignNameForMex").isJsonNull()) && !jsonObj.get("campaignNameForMex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignNameForMex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignNameForMex").toString()));
      }
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      // validate the optional field `level`
      if (jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) {
        LevelEnum.validateJsonElement(jsonObj.get("level"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("deductedPart") != null && !jsonObj.get("deductedPart").isJsonNull()) && !jsonObj.get("deductedPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deductedPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deductedPart").toString()));
      }
      // validate the optional field `deductedPart`
      if (jsonObj.get("deductedPart") != null && !jsonObj.get("deductedPart").isJsonNull()) {
        DeductedPartEnum.validateJsonElement(jsonObj.get("deductedPart"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("appliedItemIDs") != null && !jsonObj.get("appliedItemIDs").isJsonNull() && !jsonObj.get("appliedItemIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliedItemIDs` to be an array in the JSON string but got `%s`", jsonObj.get("appliedItemIDs").toString()));
      }
      // validate the optional field `freeItem`
      if (jsonObj.get("freeItem") != null && !jsonObj.get("freeItem").isJsonNull()) {
        OrderFreeItem.validateJsonElement(jsonObj.get("freeItem"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderCampaign.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderCampaign' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderCampaign> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderCampaign.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderCampaign>() {
           @Override
           public void write(JsonWriter out, OrderCampaign value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderCampaign read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             OrderCampaign instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderCampaign given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderCampaign
   * @throws IOException if the JSON string is invalid with respect to OrderCampaign
   */
  public static OrderCampaign fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderCampaign.class);
  }

  /**
   * Convert an instance of OrderCampaign to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

