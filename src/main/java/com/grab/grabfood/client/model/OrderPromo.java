// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.grab.grabfood.client.JSON;

/**
 * OrderPromo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class OrderPromo {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROMO_AMOUNT = "promoAmount";
  @SerializedName(SERIALIZED_NAME_PROMO_AMOUNT)
  private Long promoAmount;

  public static final String SERIALIZED_NAME_MEX_FUNDED_RATIO = "mexFundedRatio";
  @SerializedName(SERIALIZED_NAME_MEX_FUNDED_RATIO)
  private Integer mexFundedRatio;

  public static final String SERIALIZED_NAME_MEX_FUNDED_AMOUNT = "mexFundedAmount";
  @SerializedName(SERIALIZED_NAME_MEX_FUNDED_AMOUNT)
  private Long mexFundedAmount;

  public static final String SERIALIZED_NAME_TARGETED_PRICE = "targetedPrice";
  @SerializedName(SERIALIZED_NAME_TARGETED_PRICE)
  private Long targetedPrice;

  public static final String SERIALIZED_NAME_PROMO_AMOUNT_IN_MIN = "promoAmountInMin";
  @SerializedName(SERIALIZED_NAME_PROMO_AMOUNT_IN_MIN)
  private Long promoAmountInMin;

  public OrderPromo() {
  }

  public OrderPromo code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Promo code applied in the order.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public OrderPromo description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Promo description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OrderPromo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the promotion.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrderPromo promoAmount(Long promoAmount) {
    this.promoAmount = promoAmount;
    return this;
  }

  /**
   * Promo amount applied in the order, in local currency. This amount is rounded into whole number.
   * @return promoAmount
   */
  @javax.annotation.Nullable
  public Long getPromoAmount() {
    return promoAmount;
  }

  public void setPromoAmount(Long promoAmount) {
    this.promoAmount = promoAmount;
  }


  public OrderPromo mexFundedRatio(Integer mexFundedRatio) {
    this.mexFundedRatio = mexFundedRatio;
    return this;
  }

  /**
   * The merchant&#39;s funded ratio of the promo in percentage.
   * @return mexFundedRatio
   */
  @javax.annotation.Nullable
  public Integer getMexFundedRatio() {
    return mexFundedRatio;
  }

  public void setMexFundedRatio(Integer mexFundedRatio) {
    this.mexFundedRatio = mexFundedRatio;
  }


  public OrderPromo mexFundedAmount(Long mexFundedAmount) {
    this.mexFundedAmount = mexFundedAmount;
    return this;
  }

  /**
   * The merchant&#39;s promo fund in the minor unit. Calculated based on merchant funded ratio.
   * @return mexFundedAmount
   */
  @javax.annotation.Nullable
  public Long getMexFundedAmount() {
    return mexFundedAmount;
  }

  public void setMexFundedAmount(Long mexFundedAmount) {
    this.mexFundedAmount = mexFundedAmount;
  }


  public OrderPromo targetedPrice(Long targetedPrice) {
    this.targetedPrice = targetedPrice;
    return this;
  }

  /**
   * The subtotal of the order basket in minor unit.
   * @return targetedPrice
   */
  @javax.annotation.Nullable
  public Long getTargetedPrice() {
    return targetedPrice;
  }

  public void setTargetedPrice(Long targetedPrice) {
    this.targetedPrice = targetedPrice;
  }


  public OrderPromo promoAmountInMin(Long promoAmountInMin) {
    this.promoAmountInMin = promoAmountInMin;
    return this;
  }

  /**
   * Promo amount applied in the order in minor unit.
   * @return promoAmountInMin
   */
  @javax.annotation.Nullable
  public Long getPromoAmountInMin() {
    return promoAmountInMin;
  }

  public void setPromoAmountInMin(Long promoAmountInMin) {
    this.promoAmountInMin = promoAmountInMin;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrderPromo instance itself
   */
  public OrderPromo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPromo orderPromo = (OrderPromo) o;
    return Objects.equals(this.code, orderPromo.code) &&
        Objects.equals(this.description, orderPromo.description) &&
        Objects.equals(this.name, orderPromo.name) &&
        Objects.equals(this.promoAmount, orderPromo.promoAmount) &&
        Objects.equals(this.mexFundedRatio, orderPromo.mexFundedRatio) &&
        Objects.equals(this.mexFundedAmount, orderPromo.mexFundedAmount) &&
        Objects.equals(this.targetedPrice, orderPromo.targetedPrice) &&
        Objects.equals(this.promoAmountInMin, orderPromo.promoAmountInMin)&&
        Objects.equals(this.additionalProperties, orderPromo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, description, name, promoAmount, mexFundedRatio, mexFundedAmount, targetedPrice, promoAmountInMin, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPromo {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    promoAmount: ").append(toIndentedString(promoAmount)).append("\n");
    sb.append("    mexFundedRatio: ").append(toIndentedString(mexFundedRatio)).append("\n");
    sb.append("    mexFundedAmount: ").append(toIndentedString(mexFundedAmount)).append("\n");
    sb.append("    targetedPrice: ").append(toIndentedString(targetedPrice)).append("\n");
    sb.append("    promoAmountInMin: ").append(toIndentedString(promoAmountInMin)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("promoAmount");
    openapiFields.add("mexFundedRatio");
    openapiFields.add("mexFundedAmount");
    openapiFields.add("targetedPrice");
    openapiFields.add("promoAmountInMin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderPromo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderPromo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPromo is not found in the empty JSON string", OrderPromo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPromo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPromo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPromo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPromo.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPromo>() {
           @Override
           public void write(JsonWriter out, OrderPromo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPromo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             OrderPromo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderPromo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderPromo
   * @throws IOException if the JSON string is invalid with respect to OrderPromo
   */
  public static OrderPromo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPromo.class);
  }

  /**
   * Convert an instance of OrderPromo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

