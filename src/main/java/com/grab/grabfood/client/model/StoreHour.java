// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.grab.grabfood.client.model.OpenPeriod;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.grab.grabfood.client.JSON;

/**
 * A JSON object that describes the store hour for each day.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class StoreHour {
  public static final String SERIALIZED_NAME_MON = "mon";
  @SerializedName(SERIALIZED_NAME_MON)
  private List<OpenPeriod> mon = new ArrayList<>();

  public static final String SERIALIZED_NAME_TUE = "tue";
  @SerializedName(SERIALIZED_NAME_TUE)
  private List<OpenPeriod> tue = new ArrayList<>();

  public static final String SERIALIZED_NAME_WED = "wed";
  @SerializedName(SERIALIZED_NAME_WED)
  private List<OpenPeriod> wed = new ArrayList<>();

  public static final String SERIALIZED_NAME_THU = "thu";
  @SerializedName(SERIALIZED_NAME_THU)
  private List<OpenPeriod> thu = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRI = "fri";
  @SerializedName(SERIALIZED_NAME_FRI)
  private List<OpenPeriod> fri = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAT = "sat";
  @SerializedName(SERIALIZED_NAME_SAT)
  private List<OpenPeriod> sat = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUN = "sun";
  @SerializedName(SERIALIZED_NAME_SUN)
  private List<OpenPeriod> sun = new ArrayList<>();

  public StoreHour() {
  }

  public StoreHour mon(List<OpenPeriod> mon) {
    this.mon = mon;
    return this;
  }

  public StoreHour addMonItem(OpenPeriod monItem) {
    if (this.mon == null) {
      this.mon = new ArrayList<>();
    }
    this.mon.add(monItem);
    return this;
  }

  /**
   * An array of open periods. Maximum of 3 periods. Blank indicates store close.
   * @return mon
   */
  @javax.annotation.Nonnull
  public List<OpenPeriod> getMon() {
    return mon;
  }

  public void setMon(List<OpenPeriod> mon) {
    this.mon = mon;
  }


  public StoreHour tue(List<OpenPeriod> tue) {
    this.tue = tue;
    return this;
  }

  public StoreHour addTueItem(OpenPeriod tueItem) {
    if (this.tue == null) {
      this.tue = new ArrayList<>();
    }
    this.tue.add(tueItem);
    return this;
  }

  /**
   * An array of open periods. Maximum of 3 periods. Blank indicates store close.
   * @return tue
   */
  @javax.annotation.Nonnull
  public List<OpenPeriod> getTue() {
    return tue;
  }

  public void setTue(List<OpenPeriod> tue) {
    this.tue = tue;
  }


  public StoreHour wed(List<OpenPeriod> wed) {
    this.wed = wed;
    return this;
  }

  public StoreHour addWedItem(OpenPeriod wedItem) {
    if (this.wed == null) {
      this.wed = new ArrayList<>();
    }
    this.wed.add(wedItem);
    return this;
  }

  /**
   * An array of open periods. Maximum of 3 periods. Blank indicates store close.
   * @return wed
   */
  @javax.annotation.Nonnull
  public List<OpenPeriod> getWed() {
    return wed;
  }

  public void setWed(List<OpenPeriod> wed) {
    this.wed = wed;
  }


  public StoreHour thu(List<OpenPeriod> thu) {
    this.thu = thu;
    return this;
  }

  public StoreHour addThuItem(OpenPeriod thuItem) {
    if (this.thu == null) {
      this.thu = new ArrayList<>();
    }
    this.thu.add(thuItem);
    return this;
  }

  /**
   * An array of open periods. Maximum of 3 periods. Blank indicates store close.
   * @return thu
   */
  @javax.annotation.Nonnull
  public List<OpenPeriod> getThu() {
    return thu;
  }

  public void setThu(List<OpenPeriod> thu) {
    this.thu = thu;
  }


  public StoreHour fri(List<OpenPeriod> fri) {
    this.fri = fri;
    return this;
  }

  public StoreHour addFriItem(OpenPeriod friItem) {
    if (this.fri == null) {
      this.fri = new ArrayList<>();
    }
    this.fri.add(friItem);
    return this;
  }

  /**
   * An array of open periods. Maximum of 3 periods. Blank indicates store close.
   * @return fri
   */
  @javax.annotation.Nonnull
  public List<OpenPeriod> getFri() {
    return fri;
  }

  public void setFri(List<OpenPeriod> fri) {
    this.fri = fri;
  }


  public StoreHour sat(List<OpenPeriod> sat) {
    this.sat = sat;
    return this;
  }

  public StoreHour addSatItem(OpenPeriod satItem) {
    if (this.sat == null) {
      this.sat = new ArrayList<>();
    }
    this.sat.add(satItem);
    return this;
  }

  /**
   * An array of open periods. Maximum of 3 periods. Blank indicates store close.
   * @return sat
   */
  @javax.annotation.Nonnull
  public List<OpenPeriod> getSat() {
    return sat;
  }

  public void setSat(List<OpenPeriod> sat) {
    this.sat = sat;
  }


  public StoreHour sun(List<OpenPeriod> sun) {
    this.sun = sun;
    return this;
  }

  public StoreHour addSunItem(OpenPeriod sunItem) {
    if (this.sun == null) {
      this.sun = new ArrayList<>();
    }
    this.sun.add(sunItem);
    return this;
  }

  /**
   * An array of open periods. Maximum of 3 periods. Blank indicates store close.
   * @return sun
   */
  @javax.annotation.Nonnull
  public List<OpenPeriod> getSun() {
    return sun;
  }

  public void setSun(List<OpenPeriod> sun) {
    this.sun = sun;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StoreHour instance itself
   */
  public StoreHour putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoreHour storeHour = (StoreHour) o;
    return Objects.equals(this.mon, storeHour.mon) &&
        Objects.equals(this.tue, storeHour.tue) &&
        Objects.equals(this.wed, storeHour.wed) &&
        Objects.equals(this.thu, storeHour.thu) &&
        Objects.equals(this.fri, storeHour.fri) &&
        Objects.equals(this.sat, storeHour.sat) &&
        Objects.equals(this.sun, storeHour.sun)&&
        Objects.equals(this.additionalProperties, storeHour.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mon, tue, wed, thu, fri, sat, sun, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoreHour {\n");
    sb.append("    mon: ").append(toIndentedString(mon)).append("\n");
    sb.append("    tue: ").append(toIndentedString(tue)).append("\n");
    sb.append("    wed: ").append(toIndentedString(wed)).append("\n");
    sb.append("    thu: ").append(toIndentedString(thu)).append("\n");
    sb.append("    fri: ").append(toIndentedString(fri)).append("\n");
    sb.append("    sat: ").append(toIndentedString(sat)).append("\n");
    sb.append("    sun: ").append(toIndentedString(sun)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mon");
    openapiFields.add("tue");
    openapiFields.add("wed");
    openapiFields.add("thu");
    openapiFields.add("fri");
    openapiFields.add("sat");
    openapiFields.add("sun");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mon");
    openapiRequiredFields.add("tue");
    openapiRequiredFields.add("wed");
    openapiRequiredFields.add("thu");
    openapiRequiredFields.add("fri");
    openapiRequiredFields.add("sat");
    openapiRequiredFields.add("sun");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoreHour
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoreHour.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoreHour is not found in the empty JSON string", StoreHour.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StoreHour.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("mon").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mon` to be an array in the JSON string but got `%s`", jsonObj.get("mon").toString()));
      }

      JsonArray jsonArraymon = jsonObj.getAsJsonArray("mon");
      // validate the required field `mon` (array)
      for (int i = 0; i < jsonArraymon.size(); i++) {
        OpenPeriod.validateJsonElement(jsonArraymon.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("tue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tue` to be an array in the JSON string but got `%s`", jsonObj.get("tue").toString()));
      }

      JsonArray jsonArraytue = jsonObj.getAsJsonArray("tue");
      // validate the required field `tue` (array)
      for (int i = 0; i < jsonArraytue.size(); i++) {
        OpenPeriod.validateJsonElement(jsonArraytue.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("wed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wed` to be an array in the JSON string but got `%s`", jsonObj.get("wed").toString()));
      }

      JsonArray jsonArraywed = jsonObj.getAsJsonArray("wed");
      // validate the required field `wed` (array)
      for (int i = 0; i < jsonArraywed.size(); i++) {
        OpenPeriod.validateJsonElement(jsonArraywed.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("thu").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `thu` to be an array in the JSON string but got `%s`", jsonObj.get("thu").toString()));
      }

      JsonArray jsonArraythu = jsonObj.getAsJsonArray("thu");
      // validate the required field `thu` (array)
      for (int i = 0; i < jsonArraythu.size(); i++) {
        OpenPeriod.validateJsonElement(jsonArraythu.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("fri").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fri` to be an array in the JSON string but got `%s`", jsonObj.get("fri").toString()));
      }

      JsonArray jsonArrayfri = jsonObj.getAsJsonArray("fri");
      // validate the required field `fri` (array)
      for (int i = 0; i < jsonArrayfri.size(); i++) {
        OpenPeriod.validateJsonElement(jsonArrayfri.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("sat").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sat` to be an array in the JSON string but got `%s`", jsonObj.get("sat").toString()));
      }

      JsonArray jsonArraysat = jsonObj.getAsJsonArray("sat");
      // validate the required field `sat` (array)
      for (int i = 0; i < jsonArraysat.size(); i++) {
        OpenPeriod.validateJsonElement(jsonArraysat.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("sun").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sun` to be an array in the JSON string but got `%s`", jsonObj.get("sun").toString()));
      }

      JsonArray jsonArraysun = jsonObj.getAsJsonArray("sun");
      // validate the required field `sun` (array)
      for (int i = 0; i < jsonArraysun.size(); i++) {
        OpenPeriod.validateJsonElement(jsonArraysun.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoreHour.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoreHour' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoreHour> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoreHour.class));

       return (TypeAdapter<T>) new TypeAdapter<StoreHour>() {
           @Override
           public void write(JsonWriter out, StoreHour value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StoreHour read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             StoreHour instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoreHour given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoreHour
   * @throws IOException if the JSON string is invalid with respect to StoreHour
   */
  public static StoreHour fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoreHour.class);
  }

  /**
   * Convert an instance of StoreHour to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

