// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.grab.grabfood.client.model.SpecialOpeningHour;
import com.grab.grabfood.client.model.StoreHour;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.grab.grabfood.client.JSON;

/**
 * Object contain store hour info
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class StoreHourResponse {
  public static final String SERIALIZED_NAME_DINE_IN_HOUR = "dineInHour";
  @SerializedName(SERIALIZED_NAME_DINE_IN_HOUR)
  private StoreHour dineInHour;

  public static final String SERIALIZED_NAME_OPENING_HOUR = "openingHour";
  @SerializedName(SERIALIZED_NAME_OPENING_HOUR)
  private StoreHour openingHour;

  public static final String SERIALIZED_NAME_SPECIAL_OPENING_HOURS = "specialOpeningHours";
  @SerializedName(SERIALIZED_NAME_SPECIAL_OPENING_HOURS)
  private List<SpecialOpeningHour> specialOpeningHours = new ArrayList<>();

  public StoreHourResponse() {
  }

  public StoreHourResponse dineInHour(StoreHour dineInHour) {
    this.dineInHour = dineInHour;
    return this;
  }

  /**
   * Get dineInHour
   * @return dineInHour
   */
  @javax.annotation.Nullable
  public StoreHour getDineInHour() {
    return dineInHour;
  }

  public void setDineInHour(StoreHour dineInHour) {
    this.dineInHour = dineInHour;
  }


  public StoreHourResponse openingHour(StoreHour openingHour) {
    this.openingHour = openingHour;
    return this;
  }

  /**
   * Get openingHour
   * @return openingHour
   */
  @javax.annotation.Nullable
  public StoreHour getOpeningHour() {
    return openingHour;
  }

  public void setOpeningHour(StoreHour openingHour) {
    this.openingHour = openingHour;
  }


  public StoreHourResponse specialOpeningHours(List<SpecialOpeningHour> specialOpeningHours) {
    this.specialOpeningHours = specialOpeningHours;
    return this;
  }

  public StoreHourResponse addSpecialOpeningHoursItem(SpecialOpeningHour specialOpeningHoursItem) {
    if (this.specialOpeningHours == null) {
      this.specialOpeningHours = new ArrayList<>();
    }
    this.specialOpeningHours.add(specialOpeningHoursItem);
    return this;
  }

  /**
   * The store&#39;s special opening hours.
   * @return specialOpeningHours
   */
  @javax.annotation.Nullable
  public List<SpecialOpeningHour> getSpecialOpeningHours() {
    return specialOpeningHours;
  }

  public void setSpecialOpeningHours(List<SpecialOpeningHour> specialOpeningHours) {
    this.specialOpeningHours = specialOpeningHours;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StoreHourResponse instance itself
   */
  public StoreHourResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoreHourResponse storeHourResponse = (StoreHourResponse) o;
    return Objects.equals(this.dineInHour, storeHourResponse.dineInHour) &&
        Objects.equals(this.openingHour, storeHourResponse.openingHour) &&
        Objects.equals(this.specialOpeningHours, storeHourResponse.specialOpeningHours)&&
        Objects.equals(this.additionalProperties, storeHourResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dineInHour, openingHour, specialOpeningHours, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoreHourResponse {\n");
    sb.append("    dineInHour: ").append(toIndentedString(dineInHour)).append("\n");
    sb.append("    openingHour: ").append(toIndentedString(openingHour)).append("\n");
    sb.append("    specialOpeningHours: ").append(toIndentedString(specialOpeningHours)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dineInHour");
    openapiFields.add("openingHour");
    openapiFields.add("specialOpeningHours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoreHourResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoreHourResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoreHourResponse is not found in the empty JSON string", StoreHourResponse.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dineInHour`
      if (jsonObj.get("dineInHour") != null && !jsonObj.get("dineInHour").isJsonNull()) {
        StoreHour.validateJsonElement(jsonObj.get("dineInHour"));
      }
      // validate the optional field `openingHour`
      if (jsonObj.get("openingHour") != null && !jsonObj.get("openingHour").isJsonNull()) {
        StoreHour.validateJsonElement(jsonObj.get("openingHour"));
      }
      if (jsonObj.get("specialOpeningHours") != null && !jsonObj.get("specialOpeningHours").isJsonNull()) {
        JsonArray jsonArrayspecialOpeningHours = jsonObj.getAsJsonArray("specialOpeningHours");
        if (jsonArrayspecialOpeningHours != null) {
          // ensure the json data is an array
          if (!jsonObj.get("specialOpeningHours").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `specialOpeningHours` to be an array in the JSON string but got `%s`", jsonObj.get("specialOpeningHours").toString()));
          }

          // validate the optional field `specialOpeningHours` (array)
          for (int i = 0; i < jsonArrayspecialOpeningHours.size(); i++) {
            SpecialOpeningHour.validateJsonElement(jsonArrayspecialOpeningHours.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoreHourResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoreHourResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoreHourResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoreHourResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<StoreHourResponse>() {
           @Override
           public void write(JsonWriter out, StoreHourResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StoreHourResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             StoreHourResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoreHourResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoreHourResponse
   * @throws IOException if the JSON string is invalid with respect to StoreHourResponse
   */
  public static StoreHourResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoreHourResponse.class);
  }

  /**
   * Convert an instance of StoreHourResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

