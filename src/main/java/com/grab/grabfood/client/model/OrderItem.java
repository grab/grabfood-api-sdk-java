// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.grab.grabfood.client.model.OrderItemModifier;
import com.grab.grabfood.client.model.OutOfStockInstruction;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.grab.grabfood.client.JSON;

/**
 * OrderItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class OrderItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_GRAB_ITEM_I_D = "grabItemID";
  @SerializedName(SERIALIZED_NAME_GRAB_ITEM_I_D)
  private String grabItemID;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Long price;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Long tax;

  public static final String SERIALIZED_NAME_SPECIFICATIONS = "specifications";
  @SerializedName(SERIALIZED_NAME_SPECIFICATIONS)
  private String specifications;

  public static final String SERIALIZED_NAME_OUT_OF_STOCK_INSTRUCTION = "outOfStockInstruction";
  @SerializedName(SERIALIZED_NAME_OUT_OF_STOCK_INSTRUCTION)
  private OutOfStockInstruction outOfStockInstruction;

  public static final String SERIALIZED_NAME_MODIFIERS = "modifiers";
  @SerializedName(SERIALIZED_NAME_MODIFIERS)
  private List<OrderItemModifier> modifiers = new ArrayList<>();

  public OrderItem() {
  }

  public OrderItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The item&#39;s ExternalID in the partner system. 
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OrderItem grabItemID(String grabItemID) {
    this.grabItemID = grabItemID;
    return this;
  }

  /**
   * The item&#39;s ID in Grab system. Partner can use this field in the &#x60;EditOrder&#x60; endpoint.
   * @return grabItemID
   */
  @javax.annotation.Nonnull
  public String getGrabItemID() {
    return grabItemID;
  }

  public void setGrabItemID(String grabItemID) {
    this.grabItemID = grabItemID;
  }


  public OrderItem quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The number of the item ordered.
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public OrderItem price(Long price) {
    this.price = price;
    return this;
  }

  /**
   * The price (tax-inclusive) in minor format for 1 item and modifiers under it. &#x60;Item price(tax inclusive) + Modifier price(tax inclusive) | (2241*1.06)+(165*1.06)&#x3D;2550&#x60;. 
   * @return price
   */
  @javax.annotation.Nonnull
  public Long getPrice() {
    return price;
  }

  public void setPrice(Long price) {
    this.price = price;
  }


  public OrderItem tax(Long tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Tax in minor format for 1 item and all modifiers under it. &#x60;0&#x60; if tax configuration is absent. &#x60;Item tax + Modifier tax | (2241*0.06)+(165*0.06)&#x3D;144&#x60;. Refer to FAQs for more details about [tax](#section/Order/How-is-tax-calculated).
   * @return tax
   */
  @javax.annotation.Nullable
  public Long getTax() {
    return tax;
  }

  public void setTax(Long tax) {
    this.tax = tax;
  }


  public OrderItem specifications(String specifications) {
    this.specifications = specifications;
    return this;
  }

  /**
   * An extra note for the merchant. &#x60;Blank&#x60; if no note from consumer. 
   * @return specifications
   */
  @javax.annotation.Nullable
  public String getSpecifications() {
    return specifications;
  }

  public void setSpecifications(String specifications) {
    this.specifications = specifications;
  }


  public OrderItem outOfStockInstruction(OutOfStockInstruction outOfStockInstruction) {
    this.outOfStockInstruction = outOfStockInstruction;
    return this;
  }

  /**
   * Get outOfStockInstruction
   * @return outOfStockInstruction
   */
  @javax.annotation.Nullable
  public OutOfStockInstruction getOutOfStockInstruction() {
    return outOfStockInstruction;
  }

  public void setOutOfStockInstruction(OutOfStockInstruction outOfStockInstruction) {
    this.outOfStockInstruction = outOfStockInstruction;
  }


  public OrderItem modifiers(List<OrderItemModifier> modifiers) {
    this.modifiers = modifiers;
    return this;
  }

  public OrderItem addModifiersItem(OrderItemModifier modifiersItem) {
    if (this.modifiers == null) {
      this.modifiers = new ArrayList<>();
    }
    this.modifiers.add(modifiersItem);
    return this;
  }

  /**
   * An array of JSON objects modifiers. Read [this](#categories) for more information.
   * @return modifiers
   */
  @javax.annotation.Nullable
  public List<OrderItemModifier> getModifiers() {
    return modifiers;
  }

  public void setModifiers(List<OrderItemModifier> modifiers) {
    this.modifiers = modifiers;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrderItem instance itself
   */
  public OrderItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderItem orderItem = (OrderItem) o;
    return Objects.equals(this.id, orderItem.id) &&
        Objects.equals(this.grabItemID, orderItem.grabItemID) &&
        Objects.equals(this.quantity, orderItem.quantity) &&
        Objects.equals(this.price, orderItem.price) &&
        Objects.equals(this.tax, orderItem.tax) &&
        Objects.equals(this.specifications, orderItem.specifications) &&
        Objects.equals(this.outOfStockInstruction, orderItem.outOfStockInstruction) &&
        Objects.equals(this.modifiers, orderItem.modifiers)&&
        Objects.equals(this.additionalProperties, orderItem.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, grabItemID, quantity, price, tax, specifications, outOfStockInstruction, modifiers, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    grabItemID: ").append(toIndentedString(grabItemID)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    specifications: ").append(toIndentedString(specifications)).append("\n");
    sb.append("    outOfStockInstruction: ").append(toIndentedString(outOfStockInstruction)).append("\n");
    sb.append("    modifiers: ").append(toIndentedString(modifiers)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("grabItemID");
    openapiFields.add("quantity");
    openapiFields.add("price");
    openapiFields.add("tax");
    openapiFields.add("specifications");
    openapiFields.add("outOfStockInstruction");
    openapiFields.add("modifiers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("grabItemID");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("price");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderItem is not found in the empty JSON string", OrderItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("grabItemID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grabItemID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grabItemID").toString()));
      }
      if ((jsonObj.get("specifications") != null && !jsonObj.get("specifications").isJsonNull()) && !jsonObj.get("specifications").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specifications` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specifications").toString()));
      }
      // validate the optional field `outOfStockInstruction`
      if (jsonObj.get("outOfStockInstruction") != null && !jsonObj.get("outOfStockInstruction").isJsonNull()) {
        OutOfStockInstruction.validateJsonElement(jsonObj.get("outOfStockInstruction"));
      }
      if (jsonObj.get("modifiers") != null && !jsonObj.get("modifiers").isJsonNull()) {
        JsonArray jsonArraymodifiers = jsonObj.getAsJsonArray("modifiers");
        if (jsonArraymodifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modifiers` to be an array in the JSON string but got `%s`", jsonObj.get("modifiers").toString()));
          }

          // validate the optional field `modifiers` (array)
          for (int i = 0; i < jsonArraymodifiers.size(); i++) {
            OrderItemModifier.validateJsonElement(jsonArraymodifiers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderItem.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderItem>() {
           @Override
           public void write(JsonWriter out, OrderItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             OrderItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderItem
   * @throws IOException if the JSON string is invalid with respect to OrderItem
   */
  public static OrderItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderItem.class);
  }

  /**
   * Convert an instance of OrderItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

