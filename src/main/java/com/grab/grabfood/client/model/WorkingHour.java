// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.grab.grabfood.client.model.WorkingHourDay;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.grab.grabfood.client.JSON;

/**
 * A JSON object that describes the workingHour for each day.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class WorkingHour {
  public static final String SERIALIZED_NAME_SUN = "sun";
  @SerializedName(SERIALIZED_NAME_SUN)
  private WorkingHourDay sun;

  public static final String SERIALIZED_NAME_MON = "mon";
  @SerializedName(SERIALIZED_NAME_MON)
  private WorkingHourDay mon;

  public static final String SERIALIZED_NAME_TUE = "tue";
  @SerializedName(SERIALIZED_NAME_TUE)
  private WorkingHourDay tue;

  public static final String SERIALIZED_NAME_WED = "wed";
  @SerializedName(SERIALIZED_NAME_WED)
  private WorkingHourDay wed;

  public static final String SERIALIZED_NAME_THU = "thu";
  @SerializedName(SERIALIZED_NAME_THU)
  private WorkingHourDay thu;

  public static final String SERIALIZED_NAME_FRI = "fri";
  @SerializedName(SERIALIZED_NAME_FRI)
  private WorkingHourDay fri;

  public static final String SERIALIZED_NAME_SAT = "sat";
  @SerializedName(SERIALIZED_NAME_SAT)
  private WorkingHourDay sat;

  public WorkingHour() {
  }

  public WorkingHour sun(WorkingHourDay sun) {
    this.sun = sun;
    return this;
  }

  /**
   * Get sun
   * @return sun
   */
  @javax.annotation.Nullable
  public WorkingHourDay getSun() {
    return sun;
  }

  public void setSun(WorkingHourDay sun) {
    this.sun = sun;
  }


  public WorkingHour mon(WorkingHourDay mon) {
    this.mon = mon;
    return this;
  }

  /**
   * Get mon
   * @return mon
   */
  @javax.annotation.Nullable
  public WorkingHourDay getMon() {
    return mon;
  }

  public void setMon(WorkingHourDay mon) {
    this.mon = mon;
  }


  public WorkingHour tue(WorkingHourDay tue) {
    this.tue = tue;
    return this;
  }

  /**
   * Get tue
   * @return tue
   */
  @javax.annotation.Nullable
  public WorkingHourDay getTue() {
    return tue;
  }

  public void setTue(WorkingHourDay tue) {
    this.tue = tue;
  }


  public WorkingHour wed(WorkingHourDay wed) {
    this.wed = wed;
    return this;
  }

  /**
   * Get wed
   * @return wed
   */
  @javax.annotation.Nullable
  public WorkingHourDay getWed() {
    return wed;
  }

  public void setWed(WorkingHourDay wed) {
    this.wed = wed;
  }


  public WorkingHour thu(WorkingHourDay thu) {
    this.thu = thu;
    return this;
  }

  /**
   * Get thu
   * @return thu
   */
  @javax.annotation.Nullable
  public WorkingHourDay getThu() {
    return thu;
  }

  public void setThu(WorkingHourDay thu) {
    this.thu = thu;
  }


  public WorkingHour fri(WorkingHourDay fri) {
    this.fri = fri;
    return this;
  }

  /**
   * Get fri
   * @return fri
   */
  @javax.annotation.Nullable
  public WorkingHourDay getFri() {
    return fri;
  }

  public void setFri(WorkingHourDay fri) {
    this.fri = fri;
  }


  public WorkingHour sat(WorkingHourDay sat) {
    this.sat = sat;
    return this;
  }

  /**
   * Get sat
   * @return sat
   */
  @javax.annotation.Nullable
  public WorkingHourDay getSat() {
    return sat;
  }

  public void setSat(WorkingHourDay sat) {
    this.sat = sat;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WorkingHour instance itself
   */
  public WorkingHour putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkingHour workingHour = (WorkingHour) o;
    return Objects.equals(this.sun, workingHour.sun) &&
        Objects.equals(this.mon, workingHour.mon) &&
        Objects.equals(this.tue, workingHour.tue) &&
        Objects.equals(this.wed, workingHour.wed) &&
        Objects.equals(this.thu, workingHour.thu) &&
        Objects.equals(this.fri, workingHour.fri) &&
        Objects.equals(this.sat, workingHour.sat)&&
        Objects.equals(this.additionalProperties, workingHour.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sun, mon, tue, wed, thu, fri, sat, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkingHour {\n");
    sb.append("    sun: ").append(toIndentedString(sun)).append("\n");
    sb.append("    mon: ").append(toIndentedString(mon)).append("\n");
    sb.append("    tue: ").append(toIndentedString(tue)).append("\n");
    sb.append("    wed: ").append(toIndentedString(wed)).append("\n");
    sb.append("    thu: ").append(toIndentedString(thu)).append("\n");
    sb.append("    fri: ").append(toIndentedString(fri)).append("\n");
    sb.append("    sat: ").append(toIndentedString(sat)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sun");
    openapiFields.add("mon");
    openapiFields.add("tue");
    openapiFields.add("wed");
    openapiFields.add("thu");
    openapiFields.add("fri");
    openapiFields.add("sat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkingHour
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkingHour.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkingHour is not found in the empty JSON string", WorkingHour.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sun`
      if (jsonObj.get("sun") != null && !jsonObj.get("sun").isJsonNull()) {
        WorkingHourDay.validateJsonElement(jsonObj.get("sun"));
      }
      // validate the optional field `mon`
      if (jsonObj.get("mon") != null && !jsonObj.get("mon").isJsonNull()) {
        WorkingHourDay.validateJsonElement(jsonObj.get("mon"));
      }
      // validate the optional field `tue`
      if (jsonObj.get("tue") != null && !jsonObj.get("tue").isJsonNull()) {
        WorkingHourDay.validateJsonElement(jsonObj.get("tue"));
      }
      // validate the optional field `wed`
      if (jsonObj.get("wed") != null && !jsonObj.get("wed").isJsonNull()) {
        WorkingHourDay.validateJsonElement(jsonObj.get("wed"));
      }
      // validate the optional field `thu`
      if (jsonObj.get("thu") != null && !jsonObj.get("thu").isJsonNull()) {
        WorkingHourDay.validateJsonElement(jsonObj.get("thu"));
      }
      // validate the optional field `fri`
      if (jsonObj.get("fri") != null && !jsonObj.get("fri").isJsonNull()) {
        WorkingHourDay.validateJsonElement(jsonObj.get("fri"));
      }
      // validate the optional field `sat`
      if (jsonObj.get("sat") != null && !jsonObj.get("sat").isJsonNull()) {
        WorkingHourDay.validateJsonElement(jsonObj.get("sat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkingHour.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkingHour' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkingHour> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkingHour.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkingHour>() {
           @Override
           public void write(JsonWriter out, WorkingHour value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkingHour read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             WorkingHour instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkingHour given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkingHour
   * @throws IOException if the JSON string is invalid with respect to WorkingHour
   */
  public static WorkingHour fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkingHour.class);
  }

  /**
   * Convert an instance of WorkingHour to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

