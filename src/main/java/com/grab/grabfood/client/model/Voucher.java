// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.grab.grabfood.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.grab.grabfood.client.model.VoucherDescriptionInfo;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.grab.grabfood.client.JSON;

/**
 * A JSON object containing dine-in voucher details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class Voucher {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DISCOUNTED_PRICE = "discountedPrice";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_PRICE)
  private String discountedPrice;

  public static final String SERIALIZED_NAME_ORIGINAL_PRICE = "originalPrice";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PRICE)
  private String originalPrice;

  public static final String SERIALIZED_NAME_DESCRIPTION_INFO = "descriptionInfo";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_INFO)
  private VoucherDescriptionInfo descriptionInfo;

  /**
   * The type of the dine-in voucher.
   */
  @JsonAdapter(VoucherTypeEnum.Adapter.class)
  public enum VoucherTypeEnum {
    CASH("CASH"),
    
    ITEM("ITEM"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    VoucherTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VoucherTypeEnum fromValue(String value) {
      for (VoucherTypeEnum b : VoucherTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<VoucherTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VoucherTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VoucherTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VoucherTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VoucherTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VOUCHER_TYPE = "voucherType";
  @SerializedName(SERIALIZED_NAME_VOUCHER_TYPE)
  private VoucherTypeEnum voucherType;

  public Voucher() {
  }

  public Voucher title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the voucher.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Voucher discountedPrice(String discountedPrice) {
    this.discountedPrice = discountedPrice;
    return this;
  }

  /**
   * The amount paid after discount is applied in local currency.
   * @return discountedPrice
   */
  @javax.annotation.Nullable
  public String getDiscountedPrice() {
    return discountedPrice;
  }

  public void setDiscountedPrice(String discountedPrice) {
    this.discountedPrice = discountedPrice;
  }


  public Voucher originalPrice(String originalPrice) {
    this.originalPrice = originalPrice;
    return this;
  }

  /**
   * The original amount before discount is applied in local currency.
   * @return originalPrice
   */
  @javax.annotation.Nullable
  public String getOriginalPrice() {
    return originalPrice;
  }

  public void setOriginalPrice(String originalPrice) {
    this.originalPrice = originalPrice;
  }


  public Voucher descriptionInfo(VoucherDescriptionInfo descriptionInfo) {
    this.descriptionInfo = descriptionInfo;
    return this;
  }

  /**
   * Get descriptionInfo
   * @return descriptionInfo
   */
  @javax.annotation.Nullable
  public VoucherDescriptionInfo getDescriptionInfo() {
    return descriptionInfo;
  }

  public void setDescriptionInfo(VoucherDescriptionInfo descriptionInfo) {
    this.descriptionInfo = descriptionInfo;
  }


  public Voucher voucherType(VoucherTypeEnum voucherType) {
    this.voucherType = voucherType;
    return this;
  }

  /**
   * The type of the dine-in voucher.
   * @return voucherType
   */
  @javax.annotation.Nullable
  public VoucherTypeEnum getVoucherType() {
    return voucherType;
  }

  public void setVoucherType(VoucherTypeEnum voucherType) {
    this.voucherType = voucherType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Voucher instance itself
   */
  public Voucher putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Voucher voucher = (Voucher) o;
    return Objects.equals(this.title, voucher.title) &&
        Objects.equals(this.discountedPrice, voucher.discountedPrice) &&
        Objects.equals(this.originalPrice, voucher.originalPrice) &&
        Objects.equals(this.descriptionInfo, voucher.descriptionInfo) &&
        Objects.equals(this.voucherType, voucher.voucherType)&&
        Objects.equals(this.additionalProperties, voucher.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, discountedPrice, originalPrice, descriptionInfo, voucherType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Voucher {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    discountedPrice: ").append(toIndentedString(discountedPrice)).append("\n");
    sb.append("    originalPrice: ").append(toIndentedString(originalPrice)).append("\n");
    sb.append("    descriptionInfo: ").append(toIndentedString(descriptionInfo)).append("\n");
    sb.append("    voucherType: ").append(toIndentedString(voucherType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("discountedPrice");
    openapiFields.add("originalPrice");
    openapiFields.add("descriptionInfo");
    openapiFields.add("voucherType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Voucher
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Voucher.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Voucher is not found in the empty JSON string", Voucher.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("discountedPrice") != null && !jsonObj.get("discountedPrice").isJsonNull()) && !jsonObj.get("discountedPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discountedPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discountedPrice").toString()));
      }
      if ((jsonObj.get("originalPrice") != null && !jsonObj.get("originalPrice").isJsonNull()) && !jsonObj.get("originalPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalPrice").toString()));
      }
      // validate the optional field `descriptionInfo`
      if (jsonObj.get("descriptionInfo") != null && !jsonObj.get("descriptionInfo").isJsonNull()) {
        VoucherDescriptionInfo.validateJsonElement(jsonObj.get("descriptionInfo"));
      }
      if ((jsonObj.get("voucherType") != null && !jsonObj.get("voucherType").isJsonNull()) && !jsonObj.get("voucherType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voucherType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voucherType").toString()));
      }
      // validate the optional field `voucherType`
      if (jsonObj.get("voucherType") != null && !jsonObj.get("voucherType").isJsonNull()) {
        VoucherTypeEnum.validateJsonElement(jsonObj.get("voucherType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Voucher.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Voucher' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Voucher> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Voucher.class));

       return (TypeAdapter<T>) new TypeAdapter<Voucher>() {
           @Override
           public void write(JsonWriter out, Voucher value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Voucher read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Voucher instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Voucher given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Voucher
   * @throws IOException if the JSON string is invalid with respect to Voucher
   */
  public static Voucher fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Voucher.class);
  }

  /**
   * Convert an instance of Voucher to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

